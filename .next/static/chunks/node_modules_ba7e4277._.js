(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/lenis/dist/lenis.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Lenis)
});
function clamp(t, i, e) {
    return Math.max(t, Math.min(i, e));
}
class Animate {
    constructor(){
        this.isRunning = !1, this.value = 0, this.from = 0, this.to = 0, this.duration = 0, this.currentTime = 0;
    }
    advance(t) {
        var i;
        if (!this.isRunning) return;
        let e = !1;
        if (this.duration && this.easing) {
            this.currentTime += t;
            const i = clamp(0, this.currentTime / this.duration, 1);
            e = i >= 1;
            const s = e ? 1 : this.easing(i);
            this.value = this.from + (this.to - this.from) * s;
        } else this.lerp ? (this.value = function damp(t, i, e, s) {
            return function lerp(t, i, e) {
                return (1 - e) * t + e * i;
            }(t, i, 1 - Math.exp(-e * s));
        }(this.value, this.to, 60 * this.lerp, t), Math.round(this.value) === this.to && (this.value = this.to, e = !0)) : (this.value = this.to, e = !0);
        e && this.stop(), null === (i = this.onUpdate) || void 0 === i || i.call(this, this.value, e);
    }
    stop() {
        this.isRunning = !1;
    }
    fromTo(t, i, { lerp: e, duration: s, easing: o, onStart: n, onUpdate: l }) {
        this.from = this.value = t, this.to = i, this.lerp = e, this.duration = s, this.easing = o, this.currentTime = 0, this.isRunning = !0, null == n || n(), this.onUpdate = l;
    }
}
class Dimensions {
    constructor({ wrapper: t, content: i, autoResize: e = !0, debounce: s = 250 } = {}){
        this.width = 0, this.height = 0, this.scrollWidth = 0, this.scrollHeight = 0, this.resize = ()=>{
            this.onWrapperResize(), this.onContentResize();
        }, this.onWrapperResize = ()=>{
            this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : this.wrapper instanceof HTMLElement && (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
        }, this.onContentResize = ()=>{
            this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : this.wrapper instanceof HTMLElement && (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
        }, this.wrapper = t, this.content = i, e && (this.debouncedResize = function debounce(t, i) {
            let e;
            return function() {
                let s = arguments, o = this;
                clearTimeout(e), e = setTimeout(function() {
                    t.apply(o, s);
                }, i);
            };
        }(this.resize, s), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, !1) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
    }
    destroy() {
        var t, i;
        null === (t = this.wrapperResizeObserver) || void 0 === t || t.disconnect(), null === (i = this.contentResizeObserver) || void 0 === i || i.disconnect(), window.removeEventListener("resize", this.debouncedResize, !1);
    }
    get limit() {
        return {
            x: this.scrollWidth - this.width,
            y: this.scrollHeight - this.height
        };
    }
}
class Emitter {
    constructor(){
        this.events = {};
    }
    emit(t, ...i) {
        let e = this.events[t] || [];
        for(let t = 0, s = e.length; t < s; t++)e[t](...i);
    }
    on(t, i) {
        var e;
        return (null === (e = this.events[t]) || void 0 === e ? void 0 : e.push(i)) || (this.events[t] = [
            i
        ]), ()=>{
            var e;
            this.events[t] = null === (e = this.events[t]) || void 0 === e ? void 0 : e.filter((t)=>i !== t);
        };
    }
    off(t, i) {
        var e;
        this.events[t] = null === (e = this.events[t]) || void 0 === e ? void 0 : e.filter((t)=>i !== t);
    }
    destroy() {
        this.events = {};
    }
}
const t = 100 / 6;
class VirtualScroll {
    constructor(i, { wheelMultiplier: e = 1, touchMultiplier: s = 1 }){
        this.lastDelta = {
            x: 0,
            y: 0
        }, this.windowWidth = 0, this.windowHeight = 0, this.onTouchStart = (t)=>{
            const { clientX: i, clientY: e } = t.targetTouches ? t.targetTouches[0] : t;
            this.touchStart.x = i, this.touchStart.y = e, this.lastDelta = {
                x: 0,
                y: 0
            }, this.emitter.emit("scroll", {
                deltaX: 0,
                deltaY: 0,
                event: t
            });
        }, this.onTouchMove = (t)=>{
            var i, e, s, o;
            const { clientX: n, clientY: l } = t.targetTouches ? t.targetTouches[0] : t, r = -(n - (null !== (e = null === (i = this.touchStart) || void 0 === i ? void 0 : i.x) && void 0 !== e ? e : 0)) * this.touchMultiplier, h = -(l - (null !== (o = null === (s = this.touchStart) || void 0 === s ? void 0 : s.y) && void 0 !== o ? o : 0)) * this.touchMultiplier;
            this.touchStart.x = n, this.touchStart.y = l, this.lastDelta = {
                x: r,
                y: h
            }, this.emitter.emit("scroll", {
                deltaX: r,
                deltaY: h,
                event: t
            });
        }, this.onTouchEnd = (t)=>{
            this.emitter.emit("scroll", {
                deltaX: this.lastDelta.x,
                deltaY: this.lastDelta.y,
                event: t
            });
        }, this.onWheel = (i)=>{
            let { deltaX: e, deltaY: s, deltaMode: o } = i;
            e *= 1 === o ? t : 2 === o ? this.windowWidth : 1, s *= 1 === o ? t : 2 === o ? this.windowHeight : 1, e *= this.wheelMultiplier, s *= this.wheelMultiplier, this.emitter.emit("scroll", {
                deltaX: e,
                deltaY: s,
                event: i
            });
        }, this.onWindowResize = ()=>{
            this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;
        }, this.element = i, this.wheelMultiplier = e, this.touchMultiplier = s, this.touchStart = {
            x: null,
            y: null
        }, this.emitter = new Emitter, window.addEventListener("resize", this.onWindowResize, !1), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, {
            passive: !1
        }), this.element.addEventListener("touchstart", this.onTouchStart, {
            passive: !1
        }), this.element.addEventListener("touchmove", this.onTouchMove, {
            passive: !1
        }), this.element.addEventListener("touchend", this.onTouchEnd, {
            passive: !1
        });
    }
    on(t, i) {
        return this.emitter.on(t, i);
    }
    destroy() {
        this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, !1), this.element.removeEventListener("wheel", this.onWheel), this.element.removeEventListener("touchstart", this.onTouchStart), this.element.removeEventListener("touchmove", this.onTouchMove), this.element.removeEventListener("touchend", this.onTouchEnd);
    }
}
class Lenis {
    constructor({ wrapper: t = window, content: i = document.documentElement, wheelEventsTarget: e = t, eventsTarget: s = e, smoothWheel: o = !0, syncTouch: n = !1, syncTouchLerp: l = .075, touchInertiaMultiplier: r = 35, duration: h, easing: a = (t)=>Math.min(1, 1.001 - Math.pow(2, -10 * t)), lerp: c = .1, infinite: d = !1, orientation: u = "vertical", gestureOrientation: p = "vertical", touchMultiplier: m = 1, wheelMultiplier: v = 1, autoResize: g = !0, prevent: w, virtualScroll: S, __experimental__naiveDimensions: f = !1 } = {}){
        this.__isScrolling = !1, this.__isStopped = !1, this.__isLocked = !1, this.userData = {}, this.lastVelocity = 0, this.velocity = 0, this.direction = 0, this.onPointerDown = (t)=>{
            1 === t.button && this.reset();
        }, this.onVirtualScroll = (t)=>{
            if ("function" == typeof this.options.virtualScroll && !1 === this.options.virtualScroll(t)) return;
            const { deltaX: i, deltaY: e, event: s } = t;
            if (this.emitter.emit("virtual-scroll", {
                deltaX: i,
                deltaY: e,
                event: s
            }), s.ctrlKey) return;
            const o = s.type.includes("touch"), n = s.type.includes("wheel");
            this.isTouching = "touchstart" === s.type || "touchmove" === s.type;
            if (this.options.syncTouch && o && "touchstart" === s.type && !this.isStopped && !this.isLocked) return void this.reset();
            const l = 0 === i && 0 === e, r = "vertical" === this.options.gestureOrientation && 0 === e || "horizontal" === this.options.gestureOrientation && 0 === i;
            if (l || r) return;
            let h = s.composedPath();
            h = h.slice(0, h.indexOf(this.rootElement));
            const a = this.options.prevent;
            if (h.find((t)=>{
                var i, e, s, l, r;
                return t instanceof Element && ("function" == typeof a && (null == a ? void 0 : a(t)) || (null === (i = t.hasAttribute) || void 0 === i ? void 0 : i.call(t, "data-lenis-prevent")) || o && (null === (e = t.hasAttribute) || void 0 === e ? void 0 : e.call(t, "data-lenis-prevent-touch")) || n && (null === (s = t.hasAttribute) || void 0 === s ? void 0 : s.call(t, "data-lenis-prevent-wheel")) || (null === (l = t.classList) || void 0 === l ? void 0 : l.contains("lenis")) && !(null === (r = t.classList) || void 0 === r ? void 0 : r.contains("lenis-stopped")));
            })) return;
            if (this.isStopped || this.isLocked) return void s.preventDefault();
            if (!(this.options.syncTouch && o || this.options.smoothWheel && n)) return this.isScrolling = "native", void this.animate.stop();
            s.preventDefault();
            let c = e;
            "both" === this.options.gestureOrientation ? c = Math.abs(e) > Math.abs(i) ? e : i : "horizontal" === this.options.gestureOrientation && (c = i);
            const d = o && this.options.syncTouch, u = o && "touchend" === s.type && Math.abs(c) > 5;
            u && (c = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + c, Object.assign({
                programmatic: !1
            }, d ? {
                lerp: u ? this.options.syncTouchLerp : 1
            } : {
                lerp: this.options.lerp,
                duration: this.options.duration,
                easing: this.options.easing
            }));
        }, this.onNativeScroll = ()=>{
            if (clearTimeout(this.__resetVelocityTimeout), delete this.__resetVelocityTimeout, this.__preventNextNativeScrollEvent) delete this.__preventNextNativeScrollEvent;
            else if (!1 === this.isScrolling || "native" === this.isScrolling) {
                const t = this.animatedScroll;
                this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity, this.velocity = this.animatedScroll - t, this.direction = Math.sign(this.animatedScroll - t), this.isScrolling = "native", this.emit(), 0 !== this.velocity && (this.__resetVelocityTimeout = setTimeout(()=>{
                    this.lastVelocity = this.velocity, this.velocity = 0, this.isScrolling = !1, this.emit();
                }, 400));
            }
        }, window.lenisVersion = "1.1.9", t && t !== document.documentElement && t !== document.body || (t = window), this.options = {
            wrapper: t,
            content: i,
            wheelEventsTarget: e,
            eventsTarget: s,
            smoothWheel: o,
            syncTouch: n,
            syncTouchLerp: l,
            touchInertiaMultiplier: r,
            duration: h,
            easing: a,
            lerp: c,
            infinite: d,
            gestureOrientation: p,
            orientation: u,
            touchMultiplier: m,
            wheelMultiplier: v,
            autoResize: g,
            prevent: w,
            virtualScroll: S,
            __experimental__naiveDimensions: f
        }, this.animate = new Animate, this.emitter = new Emitter, this.dimensions = new Dimensions({
            wrapper: t,
            content: i,
            autoResize: g
        }), this.updateClassName(), this.userData = {}, this.time = 0, this.velocity = this.lastVelocity = 0, this.isLocked = !1, this.isStopped = !1, this.isScrolling = !1, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, !1), this.options.wrapper.addEventListener("pointerdown", this.onPointerDown, !1), this.virtualScroll = new VirtualScroll(s, {
            touchMultiplier: m,
            wheelMultiplier: v
        }), this.virtualScroll.on("scroll", this.onVirtualScroll);
    }
    destroy() {
        this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, !1), this.options.wrapper.removeEventListener("pointerdown", this.onPointerDown, !1), this.virtualScroll.destroy(), this.dimensions.destroy(), this.cleanUpClassName();
    }
    on(t, i) {
        return this.emitter.on(t, i);
    }
    off(t, i) {
        return this.emitter.off(t, i);
    }
    setScroll(t) {
        this.isHorizontal ? this.rootElement.scrollLeft = t : this.rootElement.scrollTop = t;
    }
    resize() {
        this.dimensions.resize();
    }
    emit() {
        this.emitter.emit("scroll", this);
    }
    reset() {
        this.isLocked = !1, this.isScrolling = !1, this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity = 0, this.animate.stop();
    }
    start() {
        this.isStopped && (this.isStopped = !1, this.reset());
    }
    stop() {
        this.isStopped || (this.isStopped = !0, this.animate.stop(), this.reset());
    }
    raf(t) {
        const i = t - (this.time || t);
        this.time = t, this.animate.advance(.001 * i);
    }
    scrollTo(t, { offset: i = 0, immediate: e = !1, lock: s = !1, duration: o = this.options.duration, easing: n = this.options.easing, lerp: l = this.options.lerp, onStart: r, onComplete: h, force: a = !1, programmatic: c = !0, userData: d = {} } = {}) {
        if (!this.isStopped && !this.isLocked || a) {
            if ("string" == typeof t && [
                "top",
                "left",
                "start"
            ].includes(t)) t = 0;
            else if ("string" == typeof t && [
                "bottom",
                "right",
                "end"
            ].includes(t)) t = this.limit;
            else {
                let e;
                if ("string" == typeof t ? e = document.querySelector(t) : t instanceof HTMLElement && (null == t ? void 0 : t.nodeType) && (e = t), e) {
                    if (this.options.wrapper !== window) {
                        const t = this.rootElement.getBoundingClientRect();
                        i -= this.isHorizontal ? t.left : t.top;
                    }
                    const s = e.getBoundingClientRect();
                    t = (this.isHorizontal ? s.left : s.top) + this.animatedScroll;
                }
            }
            if ("number" == typeof t && (t += i, t = Math.round(t), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : t = clamp(0, t, this.limit), t !== this.targetScroll)) {
                if (this.userData = d, e) return this.animatedScroll = this.targetScroll = t, this.setScroll(this.scroll), this.reset(), this.preventNextNativeScrollEvent(), this.emit(), null == h || h(this), void (this.userData = {});
                c || (this.targetScroll = t), this.animate.fromTo(this.animatedScroll, t, {
                    duration: o,
                    easing: n,
                    lerp: l,
                    onStart: ()=>{
                        s && (this.isLocked = !0), this.isScrolling = "smooth", null == r || r(this);
                    },
                    onUpdate: (t, i)=>{
                        this.isScrolling = "smooth", this.lastVelocity = this.velocity, this.velocity = t - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t, this.setScroll(this.scroll), c && (this.targetScroll = t), i || this.emit(), i && (this.reset(), this.emit(), null == h || h(this), this.userData = {}, this.preventNextNativeScrollEvent());
                    }
                });
            }
        }
    }
    preventNextNativeScrollEvent() {
        this.__preventNextNativeScrollEvent = !0, requestAnimationFrame(()=>{
            delete this.__preventNextNativeScrollEvent;
        });
    }
    get rootElement() {
        return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
    }
    get limit() {
        return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
    }
    get isHorizontal() {
        return "horizontal" === this.options.orientation;
    }
    get actualScroll() {
        return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
    }
    get scroll() {
        return this.options.infinite ? function modulo(t, i) {
            return (t % i + i) % i;
        }(this.animatedScroll, this.limit) : this.animatedScroll;
    }
    get progress() {
        return 0 === this.limit ? 1 : this.scroll / this.limit;
    }
    get isScrolling() {
        return this.__isScrolling;
    }
    set isScrolling(t) {
        this.__isScrolling !== t && (this.__isScrolling = t, this.updateClassName());
    }
    get isStopped() {
        return this.__isStopped;
    }
    set isStopped(t) {
        this.__isStopped !== t && (this.__isStopped = t, this.updateClassName());
    }
    get isLocked() {
        return this.__isLocked;
    }
    set isLocked(t) {
        this.__isLocked !== t && (this.__isLocked = t, this.updateClassName());
    }
    get isSmooth() {
        return "smooth" === this.isScrolling;
    }
    get className() {
        let t = "lenis";
        return this.isStopped && (t += " lenis-stopped"), this.isLocked && (t += " lenis-locked"), this.isScrolling && (t += " lenis-scrolling"), "smooth" === this.isScrolling && (t += " lenis-smooth"), t;
    }
    updateClassName() {
        this.cleanUpClassName(), this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();
    }
    cleanUpClassName() {
        this.rootElement.className = this.rootElement.className.replace(/lenis(-\w+)?/g, "").trim();
    }
}
;
 //# sourceMappingURL=lenis.mjs.map
}}),
"[project]/node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>c)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lenis$2f$dist$2f$lenis$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lenis/dist/lenis.mjs [app-client] (ecmascript)");
;
function s() {
    return s = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined), s.apply(null, arguments);
}
class e {
    constructor({ scrollElements: t, rootMargin: s = "-1px -1px -1px -1px", IORaf: e }){
        this.scrollElements = void 0, this.rootMargin = void 0, this.IORaf = void 0, this.observer = void 0, this.scrollElements = t, this.rootMargin = s, this.IORaf = e, this._init();
    }
    _init() {
        this.observer = new IntersectionObserver((t)=>{
            t.forEach((t)=>{
                const s = this.scrollElements.find((s)=>s.$el === t.target);
                t.isIntersecting ? (s && (s.isAlreadyIntersected = !0), this._setInview(t)) : s && s.isAlreadyIntersected && this._setOutOfView(t);
            });
        }, {
            rootMargin: this.rootMargin
        });
        for (const t of this.scrollElements)this.observe(t.$el);
    }
    destroy() {
        this.observer.disconnect();
    }
    observe(t) {
        t && this.observer.observe(t);
    }
    unobserve(t) {
        t && this.observer.unobserve(t);
    }
    _setInview(t) {
        const s = this.scrollElements.find((s)=>s.$el === t.target);
        this.IORaf && (null == s || s.setInteractivityOn()), !this.IORaf && (null == s || s.setInview());
    }
    _setOutOfView(t) {
        const s = this.scrollElements.find((s)=>s.$el === t.target);
        this.IORaf && (null == s || s.setInteractivityOff()), !this.IORaf && (null == s || s.setOutOfView()), null != s && s.attributes.scrollRepeat || this.IORaf || this.unobserve(t.target);
    }
}
function i(t, s, e, i, r) {
    return e + ((r - t) / (s - t) * (i - e) || 0);
}
function r(t, s) {
    return t.reduce((t, e)=>Math.abs(e - s) < Math.abs(t - s) ? e : t);
}
class l {
    constructor({ $el: t, id: s, modularInstance: e, subscribeElementUpdateFn: i, unsubscribeElementUpdateFn: r, needRaf: l, scrollOrientation: n }){
        var o, a, c, h, d;
        this.$el = void 0, this.id = void 0, this.needRaf = void 0, this.attributes = void 0, this.scrollOrientation = void 0, this.isAlreadyIntersected = void 0, this.intersection = void 0, this.metrics = void 0, this.currentScroll = void 0, this.translateValue = void 0, this.progress = void 0, this.lastProgress = void 0, this.modularInstance = void 0, this.progressModularModules = void 0, this.isInview = void 0, this.isInteractive = void 0, this.isInFold = void 0, this.isFirstResize = void 0, this.subscribeElementUpdateFn = void 0, this.unsubscribeElementUpdateFn = void 0, this.$el = t, this.id = s, this.needRaf = l, this.scrollOrientation = n, this.modularInstance = e, this.subscribeElementUpdateFn = i, this.unsubscribeElementUpdateFn = r, this.attributes = {
            scrollClass: null != (o = this.$el.dataset.scrollClass) ? o : "is-inview",
            scrollOffset: null != (a = this.$el.dataset.scrollOffset) ? a : "0,0",
            scrollPosition: null != (c = this.$el.dataset.scrollPosition) ? c : "start,end",
            scrollModuleProgress: null != this.$el.dataset.scrollModuleProgress,
            scrollCssProgress: null != this.$el.dataset.scrollCssProgress,
            scrollEventProgress: null != (h = this.$el.dataset.scrollEventProgress) ? h : null,
            scrollSpeed: null != this.$el.dataset.scrollSpeed ? parseFloat(this.$el.dataset.scrollSpeed) : null,
            scrollRepeat: null != this.$el.dataset.scrollRepeat,
            scrollCall: null != (d = this.$el.dataset.scrollCall) ? d : null,
            scrollCallSelf: null != this.$el.dataset.scrollCallSelf,
            scrollIgnoreFold: null != this.$el.dataset.scrollIgnoreFold,
            scrollEnableTouchSpeed: null != this.$el.dataset.scrollEnableTouchSpeed
        }, this.intersection = {
            start: 0,
            end: 0
        }, this.metrics = {
            offsetStart: 0,
            offsetEnd: 0,
            bcr: {}
        }, this.currentScroll = "vertical" === this.scrollOrientation ? window.scrollY : window.scrollX, this.translateValue = 0, this.progress = 0, this.lastProgress = null, this.progressModularModules = [], this.isInview = !1, this.isInteractive = !1, this.isAlreadyIntersected = !1, this.isInFold = !1, this.isFirstResize = !0, this._init();
    }
    _init() {
        this.needRaf && (this.modularInstance && this.attributes.scrollModuleProgress && this._getProgressModularModules(), this._resize());
    }
    onResize({ currentScroll: t }) {
        this.currentScroll = t, this._resize();
    }
    onRender({ currentScroll: t, smooth: s }) {
        const e = "vertical" === this.scrollOrientation ? window.innerHeight : window.innerWidth;
        if (this.currentScroll = t, this._computeProgress(), this.attributes.scrollSpeed && !isNaN(this.attributes.scrollSpeed)) if (this.attributes.scrollEnableTouchSpeed || s) {
            if (this.isInFold) {
                const t = Math.max(0, this.progress);
                this.translateValue = t * e * this.attributes.scrollSpeed * -1;
            } else {
                const t = i(0, 1, -1, 1, this.progress);
                this.translateValue = t * e * this.attributes.scrollSpeed * -1;
            }
            this.$el.style.transform = "vertical" === this.scrollOrientation ? `translate3d(0, ${this.translateValue}px, 0)` : `translate3d(${this.translateValue}px, 0, 0)`;
        } else this.translateValue && (this.$el.style.transform = "translate3d(0, 0, 0)"), this.translateValue = 0;
    }
    setInview() {
        if (this.isInview) return;
        this.isInview = !0, this.$el.classList.add(this.attributes.scrollClass);
        const t = this._getScrollCallFrom();
        this.attributes.scrollCall && this._dispatchCall("enter", t);
    }
    setOutOfView() {
        if (!this.isInview || !this.attributes.scrollRepeat) return;
        this.isInview = !1, this.$el.classList.remove(this.attributes.scrollClass);
        const t = this._getScrollCallFrom();
        this.attributes.scrollCall && this._dispatchCall("leave", t);
    }
    setInteractivityOn() {
        this.isInteractive || (this.isInteractive = !0, this.subscribeElementUpdateFn(this));
    }
    setInteractivityOff() {
        this.isInteractive && (this.isInteractive = !1, this.unsubscribeElementUpdateFn(this), null != this.lastProgress && this._computeProgress(r([
            0,
            1
        ], this.lastProgress)));
    }
    _resize() {
        this.metrics.bcr = this.$el.getBoundingClientRect(), this._computeMetrics(), this._computeIntersection(), this.isFirstResize && (this.isFirstResize = !1, this.isInFold && this.setInview());
    }
    _computeMetrics() {
        const { top: t, left: s, height: e, width: i } = this.metrics.bcr, r = "vertical" === this.scrollOrientation ? window.innerHeight : window.innerWidth, l = "vertical" === this.scrollOrientation ? e : i;
        this.metrics.offsetStart = this.currentScroll + ("vertical" === this.scrollOrientation ? t : s) - this.translateValue, this.metrics.offsetEnd = this.metrics.offsetStart + l, this.isInFold = this.metrics.offsetStart < r && !this.attributes.scrollIgnoreFold;
    }
    _computeIntersection() {
        const t = "vertical" === this.scrollOrientation ? window.innerHeight : window.innerWidth, s = "vertical" === this.scrollOrientation ? this.metrics.bcr.height : this.metrics.bcr.width, e = this.attributes.scrollOffset.split(","), i = null != e[0] ? e[0].trim() : "0", r = null != e[1] ? e[1].trim() : "0", l = this.attributes.scrollPosition.split(",");
        let n = null != l[0] ? l[0].trim() : "start";
        const o = null != l[1] ? l[1].trim() : "end", a = i.includes("%") ? t * parseInt(i.replace("%", "").trim()) * .01 : parseInt(i), c = r.includes("%") ? t * parseInt(r.replace("%", "").trim()) * .01 : parseInt(r);
        switch(this.isInFold && (n = "fold"), n){
            case "start":
            default:
                this.intersection.start = this.metrics.offsetStart - t + a;
                break;
            case "middle":
                this.intersection.start = this.metrics.offsetStart - t + a + .5 * s;
                break;
            case "end":
                this.intersection.start = this.metrics.offsetStart - t + a + s;
                break;
            case "fold":
                this.intersection.start = 0;
        }
        switch(o){
            case "start":
                this.intersection.end = this.metrics.offsetStart - c;
                break;
            case "middle":
                this.intersection.end = this.metrics.offsetStart - c + .5 * s;
                break;
            default:
                this.intersection.end = this.metrics.offsetStart - c + s;
        }
        if (this.intersection.end <= this.intersection.start) switch(o){
            case "start":
            default:
                this.intersection.end = this.intersection.start + 1;
                break;
            case "middle":
                this.intersection.end = this.intersection.start + .5 * s;
                break;
            case "end":
                this.intersection.end = this.intersection.start + s;
        }
    }
    _computeProgress(t) {
        const s = null != t ? t : (e = i(this.intersection.start, this.intersection.end, 0, 1, this.currentScroll)) < 0 ? 0 : e > 1 ? 1 : e;
        var e;
        if (this.progress = s, s != this.lastProgress) {
            if (this.lastProgress = s, this.attributes.scrollCssProgress && this._setCssProgress(s), this.attributes.scrollEventProgress && this._setCustomEventProgress(s), this.attributes.scrollModuleProgress) for (const t of this.progressModularModules)this.modularInstance && this.modularInstance.call("onScrollProgress", s, t.moduleName, t.moduleId);
            s > 0 && s < 1 && this.setInview(), 0 === s && this.setOutOfView(), 1 === s && this.setOutOfView();
        }
    }
    _setCssProgress(t = 0) {
        this.$el.style.setProperty("--progress", t.toString());
    }
    _setCustomEventProgress(t = 0) {
        const s = this.attributes.scrollEventProgress;
        if (!s) return;
        const e = new CustomEvent(s, {
            detail: {
                target: this.$el,
                progress: t
            }
        });
        window.dispatchEvent(e);
    }
    _getProgressModularModules() {
        if (!this.modularInstance) return;
        const t = Object.keys(this.$el.dataset).filter((t)=>t.includes("module")), s = Object.entries(this.modularInstance.modules);
        if (t.length) for (const e of t){
            const t = this.$el.dataset[e];
            if (!t) return;
            for (const e of s){
                const [s, i] = e;
                t in i && this.progressModularModules.push({
                    moduleName: s,
                    moduleId: t
                });
            }
        }
    }
    _getScrollCallFrom() {
        const t = r([
            this.intersection.start,
            this.intersection.end
        ], this.currentScroll);
        return this.intersection.start === t ? "start" : "end";
    }
    _dispatchCall(t, s) {
        var e, i;
        const r = null == (e = this.attributes.scrollCall) ? void 0 : e.split(","), l = null == (i = this.attributes) ? void 0 : i.scrollCallSelf;
        if (r && r.length > 1) {
            var n;
            const [e, i, o] = r;
            let a;
            a = l ? this.$el.dataset[`module${i.trim()}`] : o, this.modularInstance && this.modularInstance.call(e.trim(), {
                target: this.$el,
                way: t,
                from: s
            }, i.trim(), null == (n = a) ? void 0 : n.trim());
        } else if (r) {
            const [e] = r, i = new CustomEvent(e, {
                detail: {
                    target: this.$el,
                    way: t,
                    from: s
                }
            });
            window.dispatchEvent(i);
        }
    }
}
const n = [
    "scrollOffset",
    "scrollPosition",
    "scrollModuleProgress",
    "scrollCssProgress",
    "scrollEventProgress",
    "scrollSpeed"
];
class o {
    constructor({ $el: t, modularInstance: s, triggerRootMargin: e, rafRootMargin: i, scrollOrientation: r }){
        this.$scrollContainer = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.scrollElements = void 0, this.triggeredScrollElements = void 0, this.RAFScrollElements = void 0, this.scrollElementsToUpdate = void 0, this.IOTriggerInstance = void 0, this.IORafInstance = void 0, this.scrollOrientation = void 0, t ? (this.$scrollContainer = t, this.modularInstance = s, this.scrollOrientation = r, this.triggerRootMargin = null != e ? e : "-1px -1px -1px -1px", this.rafRootMargin = null != i ? i : "100% 100% 100% 100%", this.scrollElements = [], this.triggeredScrollElements = [], this.RAFScrollElements = [], this.scrollElementsToUpdate = [], this._init()) : console.error("Please provide a DOM Element as scrollContainer");
    }
    _init() {
        const t = this.$scrollContainer.querySelectorAll("[data-scroll]"), s = Array.from(t);
        this._subscribeScrollElements(s), this.IOTriggerInstance = new e({
            scrollElements: [
                ...this.triggeredScrollElements
            ],
            rootMargin: this.triggerRootMargin,
            IORaf: !1
        }), this.IORafInstance = new e({
            scrollElements: [
                ...this.RAFScrollElements
            ],
            rootMargin: this.rafRootMargin,
            IORaf: !0
        });
    }
    destroy() {
        this.IOTriggerInstance.destroy(), this.IORafInstance.destroy(), this._unsubscribeAllScrollElements();
    }
    onResize({ currentScroll: t }) {
        for (const s of this.RAFScrollElements)s.onResize({
            currentScroll: t
        });
    }
    onRender({ currentScroll: t, smooth: s }) {
        for (const e of this.scrollElementsToUpdate)e.onRender({
            currentScroll: t,
            smooth: s
        });
    }
    removeScrollElements(t) {
        const s = t.querySelectorAll("[data-scroll]");
        if (s.length) {
            for(let t = 0; t < this.triggeredScrollElements.length; t++){
                const e = this.triggeredScrollElements[t];
                Array.from(s).indexOf(e.$el) > -1 && (this.IOTriggerInstance.unobserve(e.$el), this.triggeredScrollElements.splice(t, 1));
            }
            for(let t = 0; t < this.RAFScrollElements.length; t++){
                const e = this.RAFScrollElements[t];
                Array.from(s).indexOf(e.$el) > -1 && (this.IORafInstance.unobserve(e.$el), this.RAFScrollElements.splice(t, 1));
            }
            s.forEach((t)=>{
                const s = this.scrollElementsToUpdate.find((s)=>s.$el === t), e = this.scrollElements.find((s)=>s.$el === t);
                s && this._unsubscribeElementUpdate(s), e && (this.scrollElements = this.scrollElements.filter((t)=>t.id != e.id));
            });
        }
    }
    addScrollElements(t) {
        const s = t.querySelectorAll("[data-scroll]"), e = [];
        this.scrollElements.forEach((t)=>{
            e.push(t.id);
        });
        const i = Math.max(...e, 0) + 1, r = Array.from(s);
        this._subscribeScrollElements(r, i, !0);
    }
    _subscribeScrollElements(t, s = 0, e = !1) {
        for(let i = 0; i < t.length; i++){
            const r = t[i], n = this._checkRafNeeded(r), o = new l({
                $el: r,
                id: s + i,
                scrollOrientation: this.scrollOrientation,
                modularInstance: this.modularInstance,
                subscribeElementUpdateFn: this._subscribeElementUpdate.bind(this),
                unsubscribeElementUpdateFn: this._unsubscribeElementUpdate.bind(this),
                needRaf: n
            });
            this.scrollElements.push(o), n ? (this.RAFScrollElements.push(o), e && (this.IORafInstance.scrollElements.push(o), this.IORafInstance.observe(o.$el))) : (this.triggeredScrollElements.push(o), e && (this.IOTriggerInstance.scrollElements.push(o), this.IOTriggerInstance.observe(o.$el)));
        }
    }
    _unsubscribeAllScrollElements() {
        this.scrollElements = [], this.RAFScrollElements = [], this.triggeredScrollElements = [], this.scrollElementsToUpdate = [];
    }
    _subscribeElementUpdate(t) {
        this.scrollElementsToUpdate.push(t);
    }
    _unsubscribeElementUpdate(t) {
        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter((s)=>s.id != t.id);
    }
    _checkRafNeeded(t) {
        let s = [
            ...n
        ];
        const e = (t)=>{
            s = s.filter((s)=>s != t);
        };
        if (t.dataset.scrollOffset) {
            if ("0,0" != t.dataset.scrollOffset.split(",").map((t)=>t.replace("%", "").trim()).join(",")) return !0;
            e("scrollOffset");
        } else e("scrollOffset");
        if (t.dataset.scrollPosition) {
            if ("top,bottom" != t.dataset.scrollPosition.trim()) return !0;
            e("scrollPosition");
        } else e("scrollPosition");
        if (t.dataset.scrollSpeed && !isNaN(parseFloat(t.dataset.scrollSpeed))) return !0;
        e("scrollSpeed");
        for (const e of s)if (e in t.dataset) return !0;
        return !1;
    }
}
class a {
    constructor({ resizeElements: t, resizeCallback: s = ()=>{} }){
        this.$resizeElements = void 0, this.isFirstObserve = void 0, this.observer = void 0, this.resizeCallback = void 0, this.$resizeElements = t, this.resizeCallback = s, this.isFirstObserve = !0, this._init();
    }
    _init() {
        this.observer = new ResizeObserver((t)=>{
            var s;
            !this.isFirstObserve && (null == (s = this.resizeCallback) || s.call(this)), this.isFirstObserve = !1;
        });
        for (const t of this.$resizeElements)this.observer.observe(t);
    }
    destroy() {
        this.observer.disconnect();
    }
}
class c {
    constructor({ lenisOptions: t = {}, modularInstance: s, triggerRootMargin: e, rafRootMargin: i, autoResize: r = !0, autoStart: l = !0, scrollCallback: n = ()=>{}, initCustomTicker: o, destroyCustomTicker: a } = {}){
        this.rafPlaying = void 0, this.lenisInstance = void 0, this.coreInstance = void 0, this.lenisOptions = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.rafInstance = void 0, this.autoResize = void 0, this.autoStart = void 0, this.ROInstance = void 0, this.initCustomTicker = void 0, this.destroyCustomTicker = void 0, this._onRenderBind = void 0, this._onResizeBind = void 0, this._onScrollToBind = void 0;
        for (const [s] of Object.entries(t))[
            "wrapper",
            "content",
            "infinite"
        ].includes(s) && console.warn(`Warning: Key "${s}" is not possible to edit in Locomotive Scroll.`);
        Object.assign(this, {
            lenisOptions: t,
            modularInstance: s,
            triggerRootMargin: e,
            rafRootMargin: i,
            autoResize: r,
            autoStart: l,
            scrollCallback: n,
            initCustomTicker: o,
            destroyCustomTicker: a
        }), this._onRenderBind = this._onRender.bind(this), this._onScrollToBind = this._onScrollTo.bind(this), this._onResizeBind = this._onResize.bind(this), this.rafPlaying = !1, this._init();
    }
    _init() {
        var e;
        this.lenisInstance = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lenis$2f$dist$2f$lenis$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](s({}, this.lenisOptions, {
            wrapper: window,
            content: document.documentElement,
            infinite: !1
        })), null == (e = this.lenisInstance) || e.on("scroll", this.scrollCallback), document.documentElement.setAttribute("data-scroll-orientation", this.lenisInstance.options.orientation), requestAnimationFrame(()=>{
            this.coreInstance = new o({
                $el: this.lenisInstance.rootElement,
                modularInstance: this.modularInstance,
                triggerRootMargin: this.triggerRootMargin,
                rafRootMargin: this.rafRootMargin,
                scrollOrientation: this.lenisInstance.options.orientation
            }), this._bindEvents(), this.initCustomTicker && !this.destroyCustomTicker ? console.warn("initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.") : !this.initCustomTicker && this.destroyCustomTicker && console.warn("destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble."), this.autoStart && this.start();
        });
    }
    destroy() {
        var t;
        this.stop(), this._unbindEvents(), this.lenisInstance.destroy(), null == (t = this.coreInstance) || t.destroy(), requestAnimationFrame(()=>{
            var t;
            null == (t = this.coreInstance) || t.destroy();
        });
    }
    _bindEvents() {
        this._bindScrollToEvents(), this.autoResize && ("ResizeObserver" in window ? this.ROInstance = new a({
            resizeElements: [
                document.body
            ],
            resizeCallback: this._onResizeBind
        }) : window.addEventListener("resize", this._onResizeBind));
    }
    _unbindEvents() {
        this._unbindScrollToEvents(), this.autoResize && ("ResizeObserver" in window ? this.ROInstance && this.ROInstance.destroy() : window.removeEventListener("resize", this._onResizeBind));
    }
    _bindScrollToEvents(t) {
        const s = t || this.lenisInstance.rootElement, e = null == s ? void 0 : s.querySelectorAll("[data-scroll-to]");
        (null == e ? void 0 : e.length) && e.forEach((t)=>{
            t.addEventListener("click", this._onScrollToBind, !1);
        });
    }
    _unbindScrollToEvents(t) {
        const s = t || this.lenisInstance.rootElement, e = null == s ? void 0 : s.querySelectorAll("[data-scroll-to]");
        (null == e ? void 0 : e.length) && e.forEach((t)=>{
            t.removeEventListener("click", this._onScrollToBind, !1);
        });
    }
    _onResize() {
        requestAnimationFrame(()=>{
            var t;
            null == (t = this.coreInstance) || t.onResize({
                currentScroll: this.lenisInstance.scroll
            });
        });
    }
    _onRender() {
        var t, s;
        null == (t = this.lenisInstance) || t.raf(Date.now()), null == (s = this.coreInstance) || s.onRender({
            currentScroll: this.lenisInstance.scroll,
            smooth: this.lenisInstance.options.smoothWheel
        });
    }
    _onScrollTo(t) {
        var s;
        t.preventDefault();
        const e = null != (s = t.currentTarget) ? s : null;
        if (!e) return;
        const i = e.getAttribute("data-scroll-to-href") || e.getAttribute("href"), r = e.getAttribute("data-scroll-to-offset") || 0, l = e.getAttribute("data-scroll-to-duration") || this.lenisInstance.options.duration;
        i && this.scrollTo(i, {
            offset: "string" == typeof r ? parseInt(r) : r,
            duration: "string" == typeof l ? parseInt(l) : l
        });
    }
    start() {
        var t;
        this.rafPlaying || (null == (t = this.lenisInstance) || t.start(), this.rafPlaying = !0, this.initCustomTicker ? this.initCustomTicker(this._onRenderBind) : this._raf());
    }
    stop() {
        var t;
        this.rafPlaying && (null == (t = this.lenisInstance) || t.stop(), this.rafPlaying = !1, this.destroyCustomTicker ? this.destroyCustomTicker(this._onRenderBind) : this.rafInstance && cancelAnimationFrame(this.rafInstance));
    }
    removeScrollElements(t) {
        var s;
        t ? (this._unbindScrollToEvents(t), null == (s = this.coreInstance) || s.removeScrollElements(t)) : console.error("Please provide a DOM Element as $oldContainer");
    }
    addScrollElements(t) {
        var s;
        t ? (null == (s = this.coreInstance) || s.addScrollElements(t), requestAnimationFrame(()=>{
            this._bindScrollToEvents(t);
        })) : console.error("Please provide a DOM Element as $newContainer");
    }
    resize() {
        this._onResizeBind();
    }
    scrollTo(t, s) {
        var e;
        null == (e = this.lenisInstance) || e.scrollTo(t, {
            offset: null == s ? void 0 : s.offset,
            lerp: null == s ? void 0 : s.lerp,
            duration: null == s ? void 0 : s.duration,
            immediate: null == s ? void 0 : s.immediate,
            lock: null == s ? void 0 : s.lock,
            force: null == s ? void 0 : s.force,
            easing: null == s ? void 0 : s.easing,
            onComplete: null == s ? void 0 : s.onComplete
        });
    }
    _raf() {
        this._onRenderBind(), this.rafInstance = requestAnimationFrame(()=>this._raf());
    }
}
;
 //# sourceMappingURL=locomotive-scroll.modern.mjs.map
}}),
}]);

//# sourceMappingURL=node_modules_ba7e4277._.js.map