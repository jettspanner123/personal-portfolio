{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"lenis.mjs","sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/lenis/src/maths.js","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/src/animate.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/src/dimensions.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/lenis/src/debounce.js","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/src/emitter.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/src/virtual-scroll.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/src/index.ts"],"sourcesContent":["// Clamp a value between a minimum and maximum value\r\nexport function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n// Truncate a floating-point number to a specified number of decimal places\r\nexport function truncate(value, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n// Linearly interpolate between two values using an amount (0 <= t <= 1)\r\nexport function lerp(x, y, t) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nexport function damp(x, y, lambda, dt) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * dt))\r\n}\r\n\r\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n// https://anguscroll.com/just/just-modulo\r\nexport function modulo(n, d) {\r\n  return ((n % d) + d) % d\r\n}\r\n","import { clamp, damp } from './maths'\r\n\r\n// Animate class to handle value animations with lerping or easing\r\nexport class Animate {\r\n  isRunning: boolean = false\r\n  value: number = 0\r\n  from: number = 0\r\n  to: number = 0\r\n  lerp?: number\r\n  duration?: number = 0\r\n  easing?: Function\r\n  currentTime: number = 0\r\n  onUpdate?: Function\r\n\r\n  // Advance the animation by the given delta time\r\n  advance(deltaTime: number) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.duration && this.easing) {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    } else if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      // If no easing or lerp, just jump to the end value\r\n      this.value = this.to\r\n      completed = true\r\n    }\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n  }\r\n\r\n  // Stop the animation\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  // Set up the animation from a starting value to an ending value\r\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\r\n  fromTo(\r\n    from: number,\r\n    to: number,\r\n    {\r\n      lerp,\r\n      duration,\r\n      easing,\r\n      onStart,\r\n      onUpdate,\r\n    }: {\r\n      lerp?: number\r\n      duration?: number\r\n      easing?: Function\r\n      onStart?: Function\r\n      onUpdate?: Function\r\n    }\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n","import { debounce } from './debounce'\r\n\r\ntype DimensionsOptions = {\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  autoResize?: boolean\r\n  debounce?: number\r\n}\r\n\r\nexport class Dimensions {\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  width: number = 0\r\n  height: number = 0\r\n  scrollWidth: number = 0\r\n  scrollHeight: number = 0\r\n  debouncedResize?: Function\r\n  wrapperResizeObserver?: ResizeObserver\r\n  contentResizeObserver?: ResizeObserver\r\n\r\n  // @ts-ignore\r\n  constructor({\r\n    wrapper,\r\n    content,\r\n    autoResize = true,\r\n    debounce: debounceValue = 250,\r\n  }: DimensionsOptions = {}) {\r\n    this.wrapper = wrapper\r\n    this.content = content\r\n\r\n    if (autoResize) {\r\n      this.debouncedResize = debounce(this.resize, debounceValue)\r\n\r\n      if (this.wrapper === window) {\r\n        window.addEventListener(\r\n          'resize',\r\n          this.debouncedResize as EventListener,\r\n          false\r\n        )\r\n      } else {\r\n        this.wrapperResizeObserver = new ResizeObserver(\r\n          this.debouncedResize as ResizeObserverCallback\r\n        )\r\n        this.wrapperResizeObserver.observe(this.wrapper as HTMLElement)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(\r\n        this.debouncedResize as ResizeObserverCallback\r\n      )\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n    window.removeEventListener(\r\n      'resize',\r\n      this.debouncedResize as EventListener,\r\n      false\r\n    )\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else if (this.wrapper instanceof HTMLElement) {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.scrollHeight = this.content.scrollHeight\r\n      this.scrollWidth = this.content.scrollWidth\r\n    } else if (this.wrapper instanceof HTMLElement) {\r\n      this.scrollHeight = this.wrapper.scrollHeight\r\n      this.scrollWidth = this.wrapper.scrollWidth\r\n    }\r\n  }\r\n\r\n  get limit(): {\r\n    x: number\r\n    y: number\r\n  } {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n","export function debounce(callback, delay) {\r\n  let timer\r\n  return function () {\r\n    let args = arguments\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n","export class Emitter {\r\n  events: Record<string, Function[]>\r\n\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  emit(event: string, ...args: any[]) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i](...args)\r\n    }\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(callback) || (this.events[event] = [callback])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n    }\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n","import { Emitter } from './emitter'\r\n\r\nconst LINE_HEIGHT = 100 / 6\r\n\r\nexport class VirtualScroll {\r\n  element: HTMLElement | Window\r\n  wheelMultiplier: number\r\n  touchMultiplier: number\r\n  touchStart: {\r\n    x: number | null\r\n    y: number | null\r\n  }\r\n  emitter: Emitter\r\n  lastDelta: {\r\n    x: number\r\n    y: number\r\n  } = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  windowWidth: number = 0\r\n  windowHeight: number = 0\r\n\r\n  constructor(\r\n    element: HTMLElement | Window,\r\n    { wheelMultiplier = 1, touchMultiplier = 1 }\r\n  ) {\r\n    this.element = element\r\n    this.wheelMultiplier = wheelMultiplier\r\n    this.touchMultiplier = touchMultiplier\r\n\r\n    this.touchStart = {\r\n      x: null,\r\n      y: null,\r\n    }\r\n\r\n    this.emitter = new Emitter()\r\n    window.addEventListener('resize', this.onWindowResize, false)\r\n    this.onWindowResize()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel as EventListener, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener(\r\n      'touchstart',\r\n      this.onTouchStart as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n    this.element.addEventListener(\r\n      'touchmove',\r\n      this.onTouchMove as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n    this.element.addEventListener(\r\n      'touchend',\r\n      this.onTouchEnd as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n  }\r\n\r\n  // Add an event listener for the given event and callback\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  // Remove all event listeners and clean up\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    window.removeEventListener('resize', this.onWindowResize, false)\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel as EventListener)\r\n    this.element.removeEventListener(\r\n      'touchstart',\r\n      this.onTouchStart as EventListener\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchmove',\r\n      this.onTouchMove as EventListener\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchend',\r\n      this.onTouchEnd as EventListener\r\n    )\r\n  }\r\n\r\n  // Event handler for 'touchstart' event\r\n  onTouchStart = (event: TouchEvent) => {\r\n    // @ts-expect-error\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchmove' event\r\n  onTouchMove = (event: TouchEvent) => {\r\n    // @ts-expect-error\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - (this.touchStart?.x ?? 0)) * this.touchMultiplier\r\n    const deltaY = -(clientY - (this.touchStart?.y ?? 0)) * this.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event: TouchEvent) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'wheel' event\r\n  onWheel = (event: WheelEvent) => {\r\n    let { deltaX, deltaY, deltaMode } = event\r\n\r\n    const multiplierX =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowWidth : 1\r\n    const multiplierY =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowHeight : 1\r\n\r\n    deltaX *= multiplierX\r\n    deltaY *= multiplierY\r\n\r\n    deltaX *= this.wheelMultiplier\r\n    deltaY *= this.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.windowWidth = window.innerWidth\r\n    this.windowHeight = window.innerHeight\r\n  }\r\n}\r\n","import { version } from '../../../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\ntype Overwrite<T, R> = Omit<T, keyof R> & R\r\n\r\ntype EasingFunction = (t: number) => number\r\ntype Orientation = 'vertical' | 'horizontal'\r\ntype GestureOrientation = 'vertical' | 'horizontal' | 'both'\r\ntype Scrolling = boolean | 'native' | 'smooth'\r\n\r\ntype onVirtualScrollOptions = {\r\n  deltaX: number\r\n  deltaY: number\r\n  event: WheelEvent | TouchEvent\r\n}\r\n\r\nexport type LenisOptions = Partial<{\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  wheelEventsTarget: Window | HTMLElement\r\n  eventsTarget: Window | HTMLElement\r\n  smoothWheel: boolean\r\n  syncTouch: boolean\r\n  syncTouchLerp: number\r\n  touchInertiaMultiplier: number\r\n  duration: number\r\n  easing: EasingFunction\r\n  lerp: number\r\n  infinite: boolean\r\n  orientation: Orientation\r\n  gestureOrientation: GestureOrientation\r\n  touchMultiplier: number\r\n  wheelMultiplier: number\r\n  autoResize: boolean\r\n  prevent: (node: Element) => boolean\r\n  virtualScroll: (data: onVirtualScrollOptions) => boolean\r\n  __experimental__naiveDimensions: boolean\r\n}>\r\n\r\nexport default class Lenis {\r\n  // __isSmooth: boolean = false // true if scroll should be animated\r\n  __isScrolling: Scrolling = false // true when scroll is animating\r\n  __isStopped: boolean = false // true if user should not be able to scroll - enable/disable programmatically\r\n  __isLocked: boolean = false // same as isStopped but enabled/disabled when scroll reaches target\r\n  __preventNextNativeScrollEvent?: boolean\r\n  __resetVelocityTimeout?: number\r\n\r\n  isTouching?: boolean\r\n  time: number\r\n  userData: Object = {}\r\n  lastVelocity: number = 0\r\n  velocity: number = 0\r\n  direction: 1 | -1 | 0 = 0\r\n  options: Overwrite<\r\n    LenisOptions,\r\n    {\r\n      wrapper: NonNullable<LenisOptions['wrapper']>\r\n    }\r\n  >\r\n  targetScroll: number\r\n  animatedScroll: number\r\n  animate: Animate\r\n  emitter: Emitter\r\n  dimensions: Dimensions\r\n  virtualScroll: VirtualScroll\r\n\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    wheelEventsTarget = wrapper, // deprecated\r\n    eventsTarget = wheelEventsTarget,\r\n    smoothWheel = true,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.075,\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    autoResize = true,\r\n    prevent,\r\n    virtualScroll,\r\n    __experimental__naiveDimensions = false,\r\n  }: LenisOptions = {}) {\r\n    // @ts-expect-error\r\n    window.lenisVersion = version\r\n\r\n    // if wrapper is html or body, fallback to window\r\n    if (\r\n      !wrapper ||\r\n      wrapper === document.documentElement ||\r\n      wrapper === document.body\r\n    ) {\r\n      wrapper = window\r\n    }\r\n\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      wheelEventsTarget,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      autoResize,\r\n      prevent,\r\n      virtualScroll,\r\n      __experimental__naiveDimensions,\r\n    } as LenisOptions\r\n\r\n    this.animate = new Animate()\r\n    this.emitter = new Emitter()\r\n    this.dimensions = new Dimensions({ wrapper, content, autoResize })\r\n    // this.toggleClassName('lenis', true)\r\n    this.updateClassName()\r\n\r\n    this.userData = {}\r\n    this.time = 0\r\n    this.velocity = this.lastVelocity = 0\r\n    this.isLocked = false\r\n    this.isStopped = false\r\n    // this.hasScrolled = false\r\n    // this.isSmooth = syncTouch || smoothWheel\r\n    // this.isSmooth = false\r\n    this.isScrolling = false\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, false)\r\n\r\n    this.options.wrapper.addEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener(\r\n      'scroll',\r\n      this.onNativeScroll,\r\n      false\r\n    )\r\n    this.options.wrapper.removeEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.cleanUpClassName()\r\n\r\n    // this.rootElement.className = ''\r\n\r\n    // this.toggleClassName('lenis', false)\r\n    // this.toggleClassName('lenis-smooth', false)\r\n    // this.toggleClassName('lenis-scrolling', false)\r\n    // this.toggleClassName('lenis-stopped', false)\r\n    // this.toggleClassName('lenis-locked', false)\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  private setScroll(scroll: number) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  private onPointerDown = (event: PointerEvent | MouseEvent) => {\r\n    if (event.button === 1) {\r\n      this.reset()\r\n    }\r\n  }\r\n\r\n  private onVirtualScroll = (data: onVirtualScrollOptions) => {\r\n    if (\r\n      typeof this.options.virtualScroll === 'function' &&\r\n      this.options.virtualScroll(data) === false\r\n    )\r\n      return\r\n\r\n    const { deltaX, deltaY, event } = data\r\n\r\n    this.emitter.emit('virtual-scroll', { deltaX, deltaY, event })\r\n\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    this.isTouching = event.type === 'touchstart' || event.type === 'touchmove'\r\n    // if (event.type === 'touchend') {\r\n    //   console.log('touchend', this.scroll)\r\n    //   // this.lastVelocity = this.velocity\r\n    //   // this.velocity = 0\r\n    //   // this.isScrolling = false\r\n    //   this.emit({ type: 'touchend' })\r\n    //   // alert('touchend')\r\n    //   return\r\n    // }\r\n\r\n    const isTapToStop =\r\n      this.options.syncTouch &&\r\n      isTouch &&\r\n      event.type === 'touchstart' &&\r\n      !this.isStopped &&\r\n      !this.isLocked\r\n\r\n    if (isTapToStop) {\r\n      this.reset()\r\n      return\r\n    }\r\n\r\n    const isClick = deltaX === 0 && deltaY === 0 // click event\r\n\r\n    // const isPullToRefresh =\r\n    //   this.options.gestureOrientation === 'vertical' &&\r\n    //   this.scroll === 0 &&\r\n    //   !this.options.infinite &&\r\n    //   deltaY <= 5 // touch pull to refresh, not reliable yet\r\n\r\n    const isUnknownGesture =\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) ||\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0)\r\n\r\n    if (isClick || isUnknownGesture) {\r\n      // console.log('prevent')\r\n      return\r\n    }\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    const prevent = this.options.prevent\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node instanceof Element &&\r\n          ((typeof prevent === 'function' && prevent?.(node)) ||\r\n            node.hasAttribute?.('data-lenis-prevent') ||\r\n            (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n            (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n            (node.classList?.contains('lenis') &&\r\n              !node.classList?.contains('lenis-stopped'))) // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault() // this will stop forwarding the event to the parent, this is problematic\r\n      return\r\n    }\r\n\r\n    const isSmooth =\r\n      (this.options.syncTouch && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!isSmooth) {\r\n      this.isScrolling = 'native'\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5\r\n\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch\r\n        ? {\r\n            lerp: hasTouchInertia ? this.options.syncTouchLerp : 1,\r\n          }\r\n        : {\r\n            lerp: this.options.lerp,\r\n            duration: this.options.duration,\r\n            easing: this.options.easing,\r\n          }),\r\n    })\r\n  }\r\n\r\n  resize() {\r\n    this.dimensions.resize()\r\n  }\r\n\r\n  private emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  private onNativeScroll = () => {\r\n    clearTimeout(this.__resetVelocityTimeout)\r\n    delete this.__resetVelocityTimeout\r\n\r\n    if (this.__preventNextNativeScrollEvent) {\r\n      delete this.__preventNextNativeScrollEvent\r\n      return\r\n    }\r\n\r\n    if (this.isScrolling === false || this.isScrolling === 'native') {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.lastVelocity = this.velocity\r\n      this.velocity = this.animatedScroll - lastScroll\r\n      this.direction = Math.sign(\r\n        this.animatedScroll - lastScroll\r\n      ) as Lenis['direction']\r\n      // this.isSmooth = false\r\n      this.isScrolling = 'native'\r\n      this.emit()\r\n\r\n      if (this.velocity !== 0) {\r\n        this.__resetVelocityTimeout = setTimeout(() => {\r\n          this.lastVelocity = this.velocity\r\n          this.velocity = 0\r\n          this.isScrolling = false\r\n          this.emit()\r\n        }, 400)\r\n      }\r\n\r\n      // this.hasScrolled = true\r\n      // }, 50)\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.lastVelocity = this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  start() {\r\n    if (!this.isStopped) return\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  stop() {\r\n    if (this.isStopped) return\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  raf(time: number) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  scrollTo(\r\n    target: number | string | HTMLElement,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = this.options.lerp,\r\n      onStart,\r\n      onComplete,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n      userData = {},\r\n    }: {\r\n      offset?: number\r\n      immediate?: boolean\r\n      lock?: boolean\r\n      duration?: number\r\n      easing?: EasingFunction\r\n      lerp?: number\r\n      onStart?: (lenis: Lenis) => void\r\n      onComplete?: (lenis: Lenis) => void\r\n      force?: boolean\r\n      programmatic?: boolean\r\n      userData?: object\r\n    } = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (\r\n      typeof target === 'string' &&\r\n      ['top', 'left', 'start'].includes(target)\r\n    ) {\r\n      target = 0\r\n    } else if (\r\n      typeof target === 'string' &&\r\n      ['bottom', 'right', 'end'].includes(target)\r\n    ) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target instanceof HTMLElement && target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.rootElement.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (target === this.targetScroll) return\r\n\r\n    this.userData = userData\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      this.preventNextNativeScrollEvent()\r\n      this.emit()\r\n      onComplete?.(this)\r\n      this.userData = {}\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = 'smooth'\r\n        onStart?.(this)\r\n      },\r\n      onUpdate: (value: number, completed: boolean) => {\r\n        this.isScrolling = 'smooth'\r\n\r\n        // updated\r\n        this.lastVelocity = this.velocity\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity) as Lenis['direction']\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n          this.userData = {}\r\n\r\n          // avoid emitting event twice\r\n          this.preventNextNativeScrollEvent()\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  private preventNextNativeScrollEvent() {\r\n    this.__preventNextNativeScrollEvent = true\r\n\r\n    requestAnimationFrame(() => {\r\n      delete this.__preventNextNativeScrollEvent\r\n    })\r\n  }\r\n\r\n  get rootElement() {\r\n    return (\r\n      this.options.wrapper === window\r\n        ? document.documentElement\r\n        : this.options.wrapper\r\n    ) as HTMLElement\r\n  }\r\n\r\n  get limit() {\r\n    if (this.options.__experimental__naiveDimensions) {\r\n      if (this.isHorizontal) {\r\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth\r\n      } else {\r\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight\r\n      }\r\n    } else {\r\n      return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n    }\r\n  }\r\n\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  get actualScroll(): number {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  get scroll(): number {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  get progress(): number {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  // get isSmooth() {\r\n  //   return this.__isSmooth\r\n  // }\r\n\r\n  // private set isSmooth(value: boolean) {\r\n  //   if (this.__isSmooth !== value) {\r\n  //     this.__isSmooth = value\r\n  //     this.updateClassName()\r\n  //   }\r\n  // }\r\n\r\n  get isScrolling() {\r\n    return this.__isScrolling\r\n  }\r\n\r\n  private set isScrolling(value: Scrolling) {\r\n    if (this.__isScrolling !== value) {\r\n      this.__isScrolling = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isStopped() {\r\n    return this.__isStopped\r\n  }\r\n\r\n  private set isStopped(value: boolean) {\r\n    if (this.__isStopped !== value) {\r\n      this.__isStopped = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isLocked() {\r\n    return this.__isLocked\r\n  }\r\n\r\n  private set isLocked(value: boolean) {\r\n    if (this.__isLocked !== value) {\r\n      this.__isLocked = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isSmooth() {\r\n    return this.isScrolling === 'smooth'\r\n  }\r\n\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isScrolling === 'smooth') className += ' lenis-smooth'\r\n    // if (this.isScrolling === 'native') className += ' lenis-native'\r\n    // if (this.isSmooth) className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  private updateClassName() {\r\n    this.cleanUpClassName()\r\n\r\n    this.rootElement.className =\r\n      `${this.rootElement.className} ${this.className}`.trim()\r\n  }\r\n\r\n  private cleanUpClassName() {\r\n    this.rootElement.className = this.rootElement.className\r\n      .replace(/lenis(-\\w+)?/g, '')\r\n      .trim()\r\n  }\r\n}\r\n"],"names":["clamp","min","input","max","Math","Animate","constructor","this","isRunning","value","from","to","duration","currentTime","advance","deltaTime","completed","easing","linearProgress","easedProgress","lerp","damp","x","y","lambda","dt","t","exp","round","stop","_a","onUpdate","call","fromTo","onStart","Dimensions","wrapper","content","autoResize","debounce","debounceValue","width","height","scrollWidth","scrollHeight","resize","onWrapperResize","onContentResize","window","innerWidth","innerHeight","HTMLElement","clientWidth","clientHeight","debouncedResize","callback","delay","timer","args","arguments","context","clearTimeout","setTimeout","apply","addEventListener","wrapperResizeObserver","ResizeObserver","observe","contentResizeObserver","destroy","disconnect","_b","removeEventListener","limit","Emitter","events","emit","event","callbacks","i","length","on","push","filter","off","LINE_HEIGHT","VirtualScroll","element","wheelMultiplier","touchMultiplier","lastDelta","windowWidth","windowHeight","onTouchStart","clientX","clientY","targetTouches","touchStart","emitter","deltaX","deltaY","onTouchMove","_d","_c","onTouchEnd","onWheel","deltaMode","onWindowResize","passive","Lenis","document","documentElement","wheelEventsTarget","eventsTarget","smoothWheel","syncTouch","syncTouchLerp","touchInertiaMultiplier","pow","infinite","orientation","gestureOrientation","prevent","virtualScroll","__experimental__naiveDimensions","__isScrolling","__isStopped","__isLocked","userData","lastVelocity","velocity","direction","onPointerDown","button","reset","onVirtualScroll","data","options","ctrlKey","isTouch","type","includes","isWheel","isTouching","isStopped","isLocked","isClick","isUnknownGesture","composedPath","slice","indexOf","rootElement","find","node","Element","hasAttribute","classList","contains","_e","preventDefault","isScrolling","animate","delta","abs","hasTouchInertia","scrollTo","targetScroll","Object","assign","programmatic","onNativeScroll","__resetVelocityTimeout","__preventNextNativeScrollEvent","lastScroll","animatedScroll","actualScroll","sign","lenisVersion","body","dimensions","updateClassName","time","cleanUpClassName","setScroll","scroll","isHorizontal","scrollLeft","scrollTop","start","raf","target","offset","immediate","lock","onComplete","force","querySelector","nodeType","wrapperRect","getBoundingClientRect","left","top","rect","preventNextNativeScrollEvent","requestAnimationFrame","modulo","n","d","progress","isSmooth","className","trim","replace"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6],"debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"file":"locomotive-scroll.modern.mjs","sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/locomotive-scroll/core/IO.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/locomotive-scroll/utils/maths.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/locomotive-scroll/core/ScrollElement.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/locomotive-scroll/core/Core.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/locomotive-scroll/core/RO.ts","file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/locomotive-scroll/index.ts"],"sourcesContent":["/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport type { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n","// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n","/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport type {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n","/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport type {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids, 0);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport type { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n","//@ts-ignore\nimport Lenis from 'lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport type {\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\nimport type { LenisOptions } from 'lenis';\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n    public lenisInstance: any;\n\n    private coreInstance: any;\n\n    private lenisOptions?: LenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n\n        for (const [key] of Object.entries(lenisOptions)) {\n            if ([\"wrapper\", \"content\", \"infinite\"].includes(key)) {\n                console.warn(`Warning: Key \"${key}\" is not possible to edit in Locomotive Scroll.`);\n            }\n        }\n\n        // Get arguments\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            ...this.lenisOptions,\n            wrapper: window,\n            content: document.documentElement,\n            infinite: false\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.options.smoothWheel,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisInstance.options.duration\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n\nexport * from './types';\n"],"names":["IO","constructor","scrollElements","rootMargin","IORaf","this","observer","_init","IntersectionObserver","entries","forEach","entry","$targetItem","find","item","$el","target","isIntersecting","isAlreadyIntersected","_setInview","_setOutOfView","scrollElement","observe","destroy","disconnect","$scrollElement","unobserve","setInteractivityOn","setInview","setInteractivityOff","setOutOfView","attributes","scrollRepeat","mapRange","inMin","inMax","outMin","outMax","value","closestNumber","array","reduce","prev","curr","Math","abs","ScrollElement","id","modularInstance","subscribeElementUpdateFn","unsubscribeElementUpdateFn","needRaf","scrollOrientation","_this$$el$dataset$scr","_this$$el$dataset$scr2","_this$$el$dataset$scr3","_this$$el$dataset$scr4","_this$$el$dataset$scr5","intersection","metrics","currentScroll","translateValue","progress","lastProgress","progressModularModules","isInview","isInteractive","isInFold","isFirstResize","scrollClass","dataset","scrollOffset","scrollPosition","scrollModuleProgress","scrollCssProgress","scrollEventProgress","scrollSpeed","parseFloat","scrollCall","scrollCallSelf","scrollIgnoreFold","scrollEnableTouchSpeed","start","end","offsetStart","offsetEnd","bcr","window","scrollY","scrollX","_getProgressModularModules","_resize","onResize","onRender","smooth","wSize","innerHeight","innerWidth","_computeProgress","isNaN","max","style","transform","classList","add","from","_getScrollCallFrom","_dispatchCall","remove","getBoundingClientRect","_computeMetrics","_computeIntersection","top","left","height","width","metricsSize","offset","split","undefined","trim","scrollPositionStart","scrollPositionEnd","viewportStart","includes","parseInt","replace","viewportEnd","forcedProgress","_setCssProgress","_setCustomEventProgress","modularModules","call","moduleName","moduleId","currentProgress","setProperty","toString","customEventName","customEvent","CustomEvent","detail","dispatchEvent","modulesIdNames","Object","keys","filter","key","modules","length","modulesIdName","module","moduleObj","push","closestIntersectionValue","way","_this$attributes$scro","_this$attributes","callParameters","callSelf","_targetModuleId","func","targetModuleId","ATTRIBUTES_THAT_NEED_RAF","Core","triggerRootMargin","rafRootMargin","$scrollContainer","triggeredScrollElements","RAFScrollElements","scrollElementsToUpdate","IOTriggerInstance","IORafInstance","console","error","$scrollElements","querySelectorAll","$scrollElementsArr","Array","_subscribeScrollElements","_unsubscribeAllScrollElements","removeScrollElements","$oldContainer","$scrollElementsToRemove","index","indexOf","splice","targetScrollElementToUpdate","targetScrollElement","_unsubscribeElementUpdate","scrollElementItem","addScrollElements","$newContainer","ids","fromIndex","toObserve","_checkRafNeeded","scrollElementInstance","_subscribeElementUpdate","bind","scrollElementToUpdate","attributesThatNeedRaf","removeAttribute","attributeToRemove","attribute","map","test","join","RO","resizeElements","resizeCallback","$resizeElements","isFirstObserve","ResizeObserver","_this$resizeCallback","$resizeElement","LocomotiveScroll","lenisOptions","autoResize","autoStart","scrollCallback","initCustomTicker","destroyCustomTicker","rafPlaying","lenisInstance","coreInstance","rafInstance","ROInstance","_onRenderBind","_onResizeBind","_onScrollToBind","warn","assign","_onRender","_onScrollTo","_onResize","_this$lenisInstance","Lenis","_extends","wrapper","content","document","documentElement","infinite","on","setAttribute","options","orientation","requestAnimationFrame","rootElement","_bindEvents","_this$coreInstance","stop","_unbindEvents","_this$coreInstance2","_bindScrollToEvents","body","addEventListener","_unbindScrollToEvents","removeEventListener","$container","$rootContainer","$scrollToElements","_this$coreInstance3","scroll","_this$lenisInstance2","_this$coreInstance4","raf","Date","now","smoothWheel","event","_event$currentTarget","preventDefault","$target","currentTarget","getAttribute","duration","scrollTo","_this$lenisInstance3","_raf","_this$lenisInstance4","cancelAnimationFrame","_this$coreInstance5","_this$coreInstance6","resize","_this$lenisInstance5","lerp","immediate","lock","force","easing","onComplete"],"mappings":"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","ignoreList":[0,1,2,3,4,5],"debugId":null}}]
}