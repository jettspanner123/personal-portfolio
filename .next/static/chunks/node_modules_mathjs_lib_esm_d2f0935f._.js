(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/mathjs/lib/esm/core/config.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DEFAULT_CONFIG": (()=>DEFAULT_CONFIG)
});
var DEFAULT_CONFIG = {
    // minimum relative difference between two compared values,
    // used by all comparison functions
    relTol: 1e-12,
    // minimum absolute difference between two compared values,
    // used by all comparison functions
    absTol: 1e-15,
    // type of default matrix output. Choose 'matrix' (default) or 'array'
    matrix: 'Matrix',
    // type of default number output. Choose 'number' (default) 'BigNumber', 'bigint', or 'Fraction'
    number: 'number',
    // type of fallback used for config { number: 'bigint' } when a value cannot be represented
    // in the configured numeric type. Choose 'number' (default) or 'BigNumber'.
    numberFallback: 'number',
    // number of significant digits in BigNumbers
    precision: 64,
    // predictable output type of functions. When true, output type depends only
    // on the input types. When false (default), output type can vary depending
    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
    // predictable is false, and returns `NaN` when true.
    predictable: false,
    // random seed for seeded pseudo random number generation
    // null = randomly seed
    randomSeed: null
};
}}),
"[project]/node_modules/mathjs/lib/esm/core/function/config.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MATRIX_OPTIONS": (()=>MATRIX_OPTIONS),
    "NUMBER_OPTIONS": (()=>NUMBER_OPTIONS),
    "configFactory": (()=>configFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$core$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/core/config.js [app-client] (ecmascript)");
;
;
var MATRIX_OPTIONS = [
    'Matrix',
    'Array'
]; // valid values for option matrix
var NUMBER_OPTIONS = [
    'number',
    'BigNumber',
    'bigint',
    'Fraction'
]; // valid values for option number
function configFactory(config, emit) {
    /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} relTol
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {number} absTol
   *                              Minimum absolute difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', 'bigint', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */ function _config(options) {
        if (options) {
            if (options.epsilon !== undefined) {
                // this if is only for backwards compatibility, it can be removed in the future.
                console.warn('Warning: The configuration option "epsilon" is deprecated. Use "relTol" and "absTol" instead.');
                var optionsFix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(options);
                optionsFix.relTol = options.epsilon;
                optionsFix.absTol = options.epsilon * 1e-3;
                delete optionsFix.epsilon;
                return _config(optionsFix);
            }
            var prev = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(config);
            // validate some of the options
            validateOption(options, 'matrix', MATRIX_OPTIONS);
            validateOption(options, 'number', NUMBER_OPTIONS);
            // merge options
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepExtend"])(config, options);
            var curr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(config);
            var changes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(options);
            // emit 'config' event
            emit('config', curr, prev, changes);
            return curr;
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(config);
        }
    }
    // attach the valid options to the function so they can be extended
    _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
    _config.NUMBER_OPTIONS = NUMBER_OPTIONS;
    // attach the config properties as readonly properties to the config function
    Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$core$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_CONFIG"]).forEach((key)=>{
        Object.defineProperty(_config, key, {
            get: ()=>config[key],
            enumerable: true,
            configurable: true
        });
    });
    return _config;
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */ function validateOption(options, name, values) {
    if (options[name] !== undefined && !values.includes(options[name])) {
        // unknown value
        console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". ' + 'Available options: ' + values.map((value)=>JSON.stringify(value)).join(', ') + '.');
    }
}
}}),
"[project]/node_modules/mathjs/lib/esm/core/function/typed.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */ __turbopack_context__.s({
    "createTyped": (()=>createTyped)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$typed$2d$function$2f$lib$2f$umd$2f$typed$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/typed-function/lib/umd/typed-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
;
;
;
;
// returns a new instance of typed-function
var _createTyped2 = function _createTyped() {
    // initially, return the original instance of typed-function
    // consecutively, return a new instance from typed.create.
    _createTyped2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$typed$2d$function$2f$lib$2f$umd$2f$typed$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$typed$2d$function$2f$lib$2f$umd$2f$typed$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
};
var dependencies = [
    '?BigNumber',
    '?Complex',
    '?DenseMatrix',
    '?Fraction'
];
var createTyped = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('typed', dependencies, function createTyped(_ref) {
    var { BigNumber, Complex, DenseMatrix, Fraction } = _ref;
    // TODO: typed-function must be able to silently ignore signatures with unknown data types
    // get a new instance of typed-function
    var typed = _createTyped2();
    // define all types. The order of the types determines in which order function
    // arguments are type-checked (so for performance it's important to put the
    // most used types first).
    typed.clear();
    typed.addTypes([
        {
            name: 'number',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"]
        },
        {
            name: 'Complex',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComplex"]
        },
        {
            name: 'BigNumber',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"]
        },
        {
            name: 'bigint',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigInt"]
        },
        {
            name: 'Fraction',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFraction"]
        },
        {
            name: 'Unit',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUnit"]
        },
        // The following type matches a valid variable name, i.e., an alphanumeric
        // string starting with an alphabetic character. It is used (at least)
        // in the definition of the derivative() function, as the argument telling
        // what to differentiate over must (currently) be a variable.
        // TODO: deprecate the identifier type (it's not used anymore, see https://github.com/josdejong/mathjs/issues/3253)
        {
            name: 'identifier',
            test: (s)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"] && /^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])*$/.test(s)
        },
        {
            name: 'string',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"]
        },
        {
            name: 'Chain',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isChain"]
        },
        {
            name: 'Array',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArray"]
        },
        {
            name: 'Matrix',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMatrix"]
        },
        {
            name: 'DenseMatrix',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDenseMatrix"]
        },
        {
            name: 'SparseMatrix',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSparseMatrix"]
        },
        {
            name: 'Range',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRange"]
        },
        {
            name: 'Index',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIndex"]
        },
        {
            name: 'boolean',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBoolean"]
        },
        {
            name: 'ResultSet',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isResultSet"]
        },
        {
            name: 'Help',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHelp"]
        },
        {
            name: 'function',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"]
        },
        {
            name: 'Date',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDate"]
        },
        {
            name: 'RegExp',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRegExp"]
        },
        {
            name: 'null',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNull"]
        },
        {
            name: 'undefined',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUndefined"]
        },
        {
            name: 'AccessorNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAccessorNode"]
        },
        {
            name: 'ArrayNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArrayNode"]
        },
        {
            name: 'AssignmentNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAssignmentNode"]
        },
        {
            name: 'BlockNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBlockNode"]
        },
        {
            name: 'ConditionalNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConditionalNode"]
        },
        {
            name: 'ConstantNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"]
        },
        {
            name: 'FunctionNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionNode"]
        },
        {
            name: 'FunctionAssignmentNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionAssignmentNode"]
        },
        {
            name: 'IndexNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIndexNode"]
        },
        {
            name: 'Node',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"]
        },
        {
            name: 'ObjectNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObjectNode"]
        },
        {
            name: 'OperatorNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOperatorNode"]
        },
        {
            name: 'ParenthesisNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isParenthesisNode"]
        },
        {
            name: 'RangeNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRangeNode"]
        },
        {
            name: 'RelationalNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRelationalNode"]
        },
        {
            name: 'SymbolNode',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"]
        },
        {
            name: 'Map',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMap"]
        },
        {
            name: 'Object',
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"]
        } // order 'Object' last, it matches on other classes too
    ]);
    typed.addConversions([
        {
            from: 'number',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) {
                    throwNoBignumber(x);
                }
                // note: conversion from number to BigNumber can fail if x has >15 digits
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["digits"])(x) > 15) {
                    throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
                }
                return new BigNumber(x);
            }
        },
        {
            from: 'number',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) {
                    throwNoComplex(x);
                }
                return new Complex(x, 0);
            }
        },
        {
            from: 'BigNumber',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) {
                    throwNoComplex(x);
                }
                return new Complex(x.toNumber(), 0);
            }
        },
        {
            from: 'bigint',
            to: 'number',
            convert: function convert(x) {
                if (x > Number.MAX_SAFE_INTEGER) {
                    throw new TypeError('Cannot implicitly convert bigint to number: ' + 'value exceeds the max safe integer value (value: ' + x + ')');
                }
                return Number(x);
            }
        },
        {
            from: 'bigint',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) {
                    throwNoBignumber(x);
                }
                return new BigNumber(x.toString());
            }
        },
        {
            from: 'bigint',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) {
                    throwNoFraction(x);
                }
                return new Fraction(x);
            }
        },
        {
            from: 'Fraction',
            to: 'BigNumber',
            convert: function convert(x) {
                throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
            }
        },
        {
            from: 'Fraction',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) {
                    throwNoComplex(x);
                }
                return new Complex(x.valueOf(), 0);
            }
        },
        {
            from: 'number',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) {
                    throwNoFraction(x);
                }
                var f = new Fraction(x);
                if (f.valueOf() !== x) {
                    throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
                }
                return f;
            }
        },
        {
            // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
            //  from: 'Fraction',
            //  to: 'number',
            //  convert: function (x) {
            //    return x.valueOf()
            //  }
            // }, {
            from: 'string',
            to: 'number',
            convert: function convert(x) {
                var n = Number(x);
                if (isNaN(n)) {
                    throw new Error('Cannot convert "' + x + '" to a number');
                }
                return n;
            }
        },
        {
            from: 'string',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) {
                    throwNoBignumber(x);
                }
                try {
                    return new BigNumber(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to BigNumber');
                }
            }
        },
        {
            from: 'string',
            to: 'bigint',
            convert: function convert(x) {
                try {
                    return BigInt(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to BigInt');
                }
            }
        },
        {
            from: 'string',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) {
                    throwNoFraction(x);
                }
                try {
                    return new Fraction(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to Fraction');
                }
            }
        },
        {
            from: 'string',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) {
                    throwNoComplex(x);
                }
                try {
                    return new Complex(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to Complex');
                }
            }
        },
        {
            from: 'boolean',
            to: 'number',
            convert: function convert(x) {
                return +x;
            }
        },
        {
            from: 'boolean',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) {
                    throwNoBignumber(x);
                }
                return new BigNumber(+x);
            }
        },
        {
            from: 'boolean',
            to: 'bigint',
            convert: function convert(x) {
                return BigInt(+x);
            }
        },
        {
            from: 'boolean',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) {
                    throwNoFraction(x);
                }
                return new Fraction(+x);
            }
        },
        {
            from: 'boolean',
            to: 'string',
            convert: function convert(x) {
                return String(x);
            }
        },
        {
            from: 'Array',
            to: 'Matrix',
            convert: function convert(array) {
                if (!DenseMatrix) {
                    throwNoMatrix();
                }
                return new DenseMatrix(array);
            }
        },
        {
            from: 'Matrix',
            to: 'Array',
            convert: function convert(matrix) {
                return matrix.valueOf();
            }
        }
    ]);
    // Provide a suggestion on how to call a function elementwise
    // This was added primarily as guidance for the v10 -> v11 transition,
    // and could potentially be removed in the future if it no longer seems
    // to be helpful.
    typed.onMismatch = (name, args, signatures)=>{
        var usualError = typed.createError(name, args, signatures);
        if ([
            'wrongType',
            'mismatch'
        ].includes(usualError.data.category) && args.length === 1 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(args[0]) && // check if the function can be unary:
        signatures.some((sig)=>!sig.params.includes(','))) {
            var err = new TypeError("Function '".concat(name, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(name, ")'."));
            err.data = usualError.data;
            throw err;
        }
        throw usualError;
    };
    // Provide a suggestion on how to call a function elementwise
    // This was added primarily as guidance for the v10 -> v11 transition,
    // and could potentially be removed in the future if it no longer seems
    // to be helpful.
    typed.onMismatch = (name, args, signatures)=>{
        var usualError = typed.createError(name, args, signatures);
        if ([
            'wrongType',
            'mismatch'
        ].includes(usualError.data.category) && args.length === 1 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(args[0]) && // check if the function can be unary:
        signatures.some((sig)=>!sig.params.includes(','))) {
            var err = new TypeError("Function '".concat(name, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(name, ")'."));
            err.data = usualError.data;
            throw err;
        }
        throw usualError;
    };
    return typed;
});
function throwNoBignumber(x) {
    throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
}
function throwNoComplex(x) {
    throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
}
function throwNoMatrix() {
    throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
}
function throwNoFraction(x) {
    throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
}
}}),
"[project]/node_modules/mathjs/lib/esm/version.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "version": (()=>version)
});
var version = '14.8.2'; // Note: This file is automatically generated when building math.js.
 // Changes made in this file will be overwritten.
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "e": (()=>e),
    "phi": (()=>phi),
    "pi": (()=>pi),
    "tau": (()=>tau)
});
var pi = Math.PI;
var tau = 2 * Math.PI;
var e = Math.E;
var phi = 1.6180339887498948; // eslint-disable-line no-loss-of-precision
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/arithmetic.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "absNumber": (()=>absNumber),
    "addNumber": (()=>addNumber),
    "cbrtNumber": (()=>cbrtNumber),
    "cubeNumber": (()=>cubeNumber),
    "divideNumber": (()=>divideNumber),
    "expNumber": (()=>expNumber),
    "expm1Number": (()=>expm1Number),
    "gcdNumber": (()=>gcdNumber),
    "lcmNumber": (()=>lcmNumber),
    "log10Number": (()=>log10Number),
    "log1pNumber": (()=>log1pNumber),
    "log2Number": (()=>log2Number),
    "logNumber": (()=>logNumber),
    "modNumber": (()=>modNumber),
    "multiplyNumber": (()=>multiplyNumber),
    "normNumber": (()=>normNumber),
    "nthRootNumber": (()=>nthRootNumber),
    "powNumber": (()=>powNumber),
    "roundNumber": (()=>roundNumber),
    "signNumber": (()=>signNumber),
    "sqrtNumber": (()=>sqrtNumber),
    "squareNumber": (()=>squareNumber),
    "subtractNumber": (()=>subtractNumber),
    "unaryMinusNumber": (()=>unaryMinusNumber),
    "unaryPlusNumber": (()=>unaryPlusNumber),
    "xgcdNumber": (()=>xgcdNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
;
var n1 = 'number';
var n2 = 'number, number';
function absNumber(a) {
    return Math.abs(a);
}
absNumber.signature = n1;
function addNumber(a, b) {
    return a + b;
}
addNumber.signature = n2;
function subtractNumber(a, b) {
    return a - b;
}
subtractNumber.signature = n2;
function multiplyNumber(a, b) {
    return a * b;
}
multiplyNumber.signature = n2;
function divideNumber(a, b) {
    return a / b;
}
divideNumber.signature = n2;
function unaryMinusNumber(x) {
    return -x;
}
unaryMinusNumber.signature = n1;
function unaryPlusNumber(x) {
    return x;
}
unaryPlusNumber.signature = n1;
function cbrtNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cbrt"])(x);
}
cbrtNumber.signature = n1;
function cubeNumber(x) {
    return x * x * x;
}
cubeNumber.signature = n1;
function expNumber(x) {
    return Math.exp(x);
}
expNumber.signature = n1;
function expm1Number(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["expm1"])(x);
}
expm1Number.signature = n1;
function gcdNumber(a, b) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(a) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(b)) {
        throw new Error('Parameters in function gcd must be integer numbers');
    }
    // https://en.wikipedia.org/wiki/Euclidean_algorithm
    var r;
    while(b !== 0){
        r = a % b;
        a = b;
        b = r;
    }
    return a < 0 ? -a : a;
}
gcdNumber.signature = n2;
function lcmNumber(a, b) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(a) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(b)) {
        throw new Error('Parameters in function lcm must be integer numbers');
    }
    if (a === 0 || b === 0) {
        return 0;
    }
    // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead
    var t;
    var prod = a * b;
    while(b !== 0){
        t = b;
        b = a % t;
        a = t;
    }
    return Math.abs(prod / a);
}
lcmNumber.signature = n2;
function logNumber(x, y) {
    if (y) {
        return Math.log(x) / Math.log(y);
    }
    return Math.log(x);
}
function log10Number(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log10"])(x);
}
log10Number.signature = n1;
function log2Number(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log2"])(x);
}
log2Number.signature = n1;
function log1pNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log1p"])(x);
}
log1pNumber.signature = n1;
function modNumber(x, y) {
    // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return y === 0 ? x : x - y * Math.floor(x / y);
}
modNumber.signature = n2;
function nthRootNumber(a) {
    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var inv = root < 0;
    if (inv) {
        root = -root;
    }
    if (root === 0) {
        throw new Error('Root must be non-zero');
    }
    if (a < 0 && Math.abs(root) % 2 !== 1) {
        throw new Error('Root must be odd when a is negative.');
    }
    // edge cases zero and infinity
    if (a === 0) {
        return inv ? Infinity : 0;
    }
    if (!isFinite(a)) {
        return inv ? 0 : a;
    }
    var x = Math.pow(Math.abs(a), 1 / root);
    // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1
    x = a < 0 ? -x : x;
    return inv ? 1 / x : x;
// Very nice algorithm, but fails with nthRoot(-2, 3).
// Newton's method has some well-known problems at times:
// https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
/*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */ }
function signNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sign"])(x);
}
signNumber.signature = n1;
function sqrtNumber(x) {
    return Math.sqrt(x);
}
sqrtNumber.signature = n1;
function squareNumber(x) {
    return x * x;
}
squareNumber.signature = n1;
function xgcdNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var t; // used to swap two variables
    var q; // quotient
    var r; // remainder
    var x = 0;
    var lastx = 1;
    var y = 1;
    var lasty = 0;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(a) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(b)) {
        throw new Error('Parameters in function xgcd must be integer numbers');
    }
    while(b){
        q = Math.floor(a / b);
        r = a - q * b;
        t = x;
        x = lastx - q * x;
        lastx = t;
        t = y;
        y = lasty - q * y;
        lasty = t;
        a = b;
        b = r;
    }
    var res;
    if (a < 0) {
        res = [
            -a,
            -lastx,
            -lasty
        ];
    } else {
        res = [
            a,
            a ? lastx : 0,
            lasty
        ];
    }
    return res;
}
xgcdNumber.signature = n2;
function powNumber(x, y) {
    // x^Infinity === 0 if -1 < x < 1
    // A real number 0 is returned instead of complex(0)
    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
    }
    return Math.pow(x, y);
}
powNumber.signature = n2;
function roundNumber(value) {
    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(decimals) || decimals < 0 || decimals > 15) {
        throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');
    }
    return parseFloat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixed"])(value, decimals));
}
function normNumber(x) {
    return Math.abs(x);
}
normNumber.signature = n1;
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acosNumber": (()=>acosNumber),
    "acoshNumber": (()=>acoshNumber),
    "acotNumber": (()=>acotNumber),
    "acothNumber": (()=>acothNumber),
    "acscNumber": (()=>acscNumber),
    "acschNumber": (()=>acschNumber),
    "asecNumber": (()=>asecNumber),
    "asechNumber": (()=>asechNumber),
    "asinNumber": (()=>asinNumber),
    "asinhNumber": (()=>asinhNumber),
    "atan2Number": (()=>atan2Number),
    "atanNumber": (()=>atanNumber),
    "atanhNumber": (()=>atanhNumber),
    "cosNumber": (()=>cosNumber),
    "coshNumber": (()=>coshNumber),
    "cotNumber": (()=>cotNumber),
    "cothNumber": (()=>cothNumber),
    "cscNumber": (()=>cscNumber),
    "cschNumber": (()=>cschNumber),
    "secNumber": (()=>secNumber),
    "sechNumber": (()=>sechNumber),
    "sinNumber": (()=>sinNumber),
    "sinhNumber": (()=>sinhNumber),
    "tanNumber": (()=>tanNumber),
    "tanhNumber": (()=>tanhNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
;
var n1 = 'number';
var n2 = 'number, number';
function acosNumber(x) {
    return Math.acos(x);
}
acosNumber.signature = n1;
function acoshNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acosh"])(x);
}
acoshNumber.signature = n1;
function acotNumber(x) {
    return Math.atan(1 / x);
}
acotNumber.signature = n1;
function acothNumber(x) {
    return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}
acothNumber.signature = n1;
function acscNumber(x) {
    return Math.asin(1 / x);
}
acscNumber.signature = n1;
function acschNumber(x) {
    var xInv = 1 / x;
    return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}
acschNumber.signature = n1;
function asecNumber(x) {
    return Math.acos(1 / x);
}
asecNumber.signature = n1;
function asechNumber(x) {
    var xInv = 1 / x;
    var ret = Math.sqrt(xInv * xInv - 1);
    return Math.log(ret + xInv);
}
asechNumber.signature = n1;
function asinNumber(x) {
    return Math.asin(x);
}
asinNumber.signature = n1;
function asinhNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asinh"])(x);
}
asinhNumber.signature = n1;
function atanNumber(x) {
    return Math.atan(x);
}
atanNumber.signature = n1;
function atan2Number(y, x) {
    return Math.atan2(y, x);
}
atan2Number.signature = n2;
function atanhNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["atanh"])(x);
}
atanhNumber.signature = n1;
function cosNumber(x) {
    return Math.cos(x);
}
cosNumber.signature = n1;
function coshNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cosh"])(x);
}
coshNumber.signature = n1;
function cotNumber(x) {
    return 1 / Math.tan(x);
}
cotNumber.signature = n1;
function cothNumber(x) {
    var e = Math.exp(2 * x);
    return (e + 1) / (e - 1);
}
cothNumber.signature = n1;
function cscNumber(x) {
    return 1 / Math.sin(x);
}
cscNumber.signature = n1;
function cschNumber(x) {
    // consider values close to zero (+/-)
    if (x === 0) {
        return Number.POSITIVE_INFINITY;
    } else {
        return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sign"])(x);
    }
}
cschNumber.signature = n1;
function secNumber(x) {
    return 1 / Math.cos(x);
}
secNumber.signature = n1;
function sechNumber(x) {
    return 2 / (Math.exp(x) + Math.exp(-x));
}
sechNumber.signature = n1;
function sinNumber(x) {
    return Math.sin(x);
}
sinNumber.signature = n1;
function sinhNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sinh"])(x);
}
sinhNumber.signature = n1;
function tanNumber(x) {
    return Math.tan(x);
}
tanNumber.signature = n1;
function tanhNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tanh"])(x);
}
tanhNumber.signature = n1;
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bitAndNumber": (()=>bitAndNumber),
    "bitNotNumber": (()=>bitNotNumber),
    "bitOrNumber": (()=>bitOrNumber),
    "bitXorNumber": (()=>bitXorNumber),
    "leftShiftNumber": (()=>leftShiftNumber),
    "rightArithShiftNumber": (()=>rightArithShiftNumber),
    "rightLogShiftNumber": (()=>rightLogShiftNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
;
var n1 = 'number';
var n2 = 'number, number';
function bitAndNumber(x, y) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(y)) {
        throw new Error('Integers expected in function bitAnd');
    }
    return x & y;
}
bitAndNumber.signature = n2;
function bitNotNumber(x) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x)) {
        throw new Error('Integer expected in function bitNot');
    }
    return ~x;
}
bitNotNumber.signature = n1;
function bitOrNumber(x, y) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(y)) {
        throw new Error('Integers expected in function bitOr');
    }
    return x | y;
}
bitOrNumber.signature = n2;
function bitXorNumber(x, y) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(y)) {
        throw new Error('Integers expected in function bitXor');
    }
    return x ^ y;
}
bitXorNumber.signature = n2;
function leftShiftNumber(x, y) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(y)) {
        throw new Error('Integers expected in function leftShift');
    }
    return x << y;
}
leftShiftNumber.signature = n2;
function rightArithShiftNumber(x, y) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(y)) {
        throw new Error('Integers expected in function rightArithShift');
    }
    return x >> y;
}
rightArithShiftNumber.signature = n2;
function rightLogShiftNumber(x, y) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(y)) {
        throw new Error('Integers expected in function rightLogShift');
    }
    return x >>> y;
}
rightLogShiftNumber.signature = n2;
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/combinations.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "combinationsNumber": (()=>combinationsNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/product.js [app-client] (ecmascript)");
;
;
function combinationsNumber(n, k) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
    }
    if (k > n) {
        throw new TypeError('k must be less than or equal to n');
    }
    var nMinusk = n - k;
    var answer = 1;
    var firstnumerator = k < nMinusk ? nMinusk + 1 : k + 1;
    var nextdivisor = 2;
    var lastdivisor = k < nMinusk ? k : nMinusk;
    // balance multiplications and divisions to try to keep intermediate values
    // in exact-integer range as long as possible
    for(var nextnumerator = firstnumerator; nextnumerator <= n; ++nextnumerator){
        answer *= nextnumerator;
        while(nextdivisor <= lastdivisor && answer % nextdivisor === 0){
            answer /= nextdivisor;
            ++nextdivisor;
        }
    }
    // for big n, k, floating point may have caused weirdness in remainder
    if (nextdivisor <= lastdivisor) {
        answer /= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["product"])(nextdivisor, lastdivisor);
    }
    return answer;
}
combinationsNumber.signature = 'number, number';
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isIntegerNumber": (()=>isIntegerNumber),
    "isNaNNumber": (()=>isNaNNumber),
    "isNegativeNumber": (()=>isNegativeNumber),
    "isPositiveNumber": (()=>isPositiveNumber),
    "isZeroNumber": (()=>isZeroNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
;
var n1 = 'number';
function isIntegerNumber(x) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(x);
}
isIntegerNumber.signature = n1;
function isNegativeNumber(x) {
    return x < 0;
}
isNegativeNumber.signature = n1;
function isPositiveNumber(x) {
    return x > 0;
}
isPositiveNumber.signature = n1;
function isZeroNumber(x) {
    return x === 0;
}
isZeroNumber.signature = n1;
function isNaNNumber(x) {
    return Number.isNaN(x);
}
isNaNNumber.signature = n1;
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/probability.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable no-loss-of-precision */ __turbopack_context__.s({
    "gammaG": (()=>gammaG),
    "gammaNumber": (()=>gammaNumber),
    "gammaP": (()=>gammaP),
    "lgammaG": (()=>lgammaG),
    "lgammaN": (()=>lgammaN),
    "lgammaNumber": (()=>lgammaNumber),
    "lgammaSeries": (()=>lgammaSeries),
    "lnSqrt2PI": (()=>lnSqrt2PI)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/product.js [app-client] (ecmascript)");
;
;
function gammaNumber(n) {
    var x;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isInteger"])(n)) {
        if (n <= 0) {
            return isFinite(n) ? Infinity : NaN;
        }
        if (n > 171) {
            return Infinity; // Will overflow
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["product"])(1, n - 1);
    }
    if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
    }
    if (n >= 171.35) {
        return Infinity; // will overflow
    }
    if (n > 85.0) {
        // Extended Stirling Approx
        var twoN = n * n;
        var threeN = twoN * n;
        var fourN = threeN * n;
        var fiveN = fourN * n;
        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
    }
    --n;
    x = gammaP[0];
    for(var i = 1; i < gammaP.length; ++i){
        x += gammaP[i] / (n + i);
    }
    var t = n + gammaG + 0.5;
    return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}
gammaNumber.signature = 'number';
var gammaG = 4.7421875;
var gammaP = [
    0.99999999999999709182,
    57.156235665862923517,
    -59.597960355475491248,
    14.136097974741747174,
    -0.49191381609762019978,
    0.33994649984811888699e-4,
    0.46523628927048575665e-4,
    -0.98374475304879564677e-4,
    0.15808870322491248884e-3,
    -0.21026444172410488319e-3,
    0.21743961811521264320e-3,
    -0.16431810653676389022e-3,
    0.84418223983852743293e-4,
    -0.26190838401581408670e-4,
    0.36899182659531622704e-5
];
var lnSqrt2PI = 0.91893853320467274178;
var lgammaG = 5; // Lanczos parameter "g"
var lgammaN = 7; // Range of coefficients "n"
var lgammaSeries = [
    1.000000000190015,
    76.18009172947146,
    -86.50532032941677,
    24.01409824083091,
    -1.231739572450155,
    0.1208650973866179e-2,
    -0.5395239384953e-5
];
function lgammaNumber(n) {
    if (n < 0) return NaN;
    if (n === 0) return Infinity;
    if (!isFinite(n)) return n;
    if (n < 0.5) {
        // Use Euler's reflection formula:
        // gamma(z) = PI / (sin(PI * z) * gamma(1 - z))
        return Math.log(Math.PI / Math.sin(Math.PI * n)) - lgammaNumber(1 - n);
    }
    // Compute the logarithm of the Gamma function using the Lanczos method
    n = n - 1;
    var base = n + lgammaG + 0.5; // Base of the Lanczos exponential
    var sum = lgammaSeries[0];
    // We start with the terms that have the smallest coefficients and largest denominator
    for(var i = lgammaN - 1; i >= 1; i--){
        sum += lgammaSeries[i] / (n + i);
    }
    return lnSqrt2PI + (n + 0.5) * Math.log(base) - base + Math.log(sum);
}
lgammaNumber.signature = 'number';
}}),
"[project]/node_modules/mathjs/lib/esm/plain/number/logical.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "andNumber": (()=>andNumber),
    "notNumber": (()=>notNumber),
    "orNumber": (()=>orNumber),
    "xorNumber": (()=>xorNumber)
});
var n1 = 'number';
var n2 = 'number, number';
function notNumber(x) {
    return !x;
}
notNumber.signature = n1;
function orNumber(x, y) {
    return !!(x || y);
}
orNumber.signature = n2;
function xorNumber(x, y) {
    return !!x !== !!y;
}
xorNumber.signature = n2;
function andNumber(x, y) {
    return !!(x && y);
}
andNumber.signature = n2;
}}),
"[project]/node_modules/mathjs/lib/esm/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createE": (()=>createE),
    "createFalse": (()=>createFalse),
    "createI": (()=>createI),
    "createInfinity": (()=>createInfinity),
    "createLN10": (()=>createLN10),
    "createLN2": (()=>createLN2),
    "createLOG10E": (()=>createLOG10E),
    "createLOG2E": (()=>createLOG2E),
    "createNaN": (()=>createNaN),
    "createNull": (()=>createNull),
    "createPhi": (()=>createPhi),
    "createPi": (()=>createPi),
    "createSQRT1_2": (()=>createSQRT1_2),
    "createSQRT2": (()=>createSQRT2),
    "createTau": (()=>createTau),
    "createTrue": (()=>createTrue),
    "createUppercaseE": (()=>createUppercaseE),
    "createUppercasePi": (()=>createUppercasePi),
    "createVersion": (()=>createVersion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$version$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/version.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/constants.js [app-client] (ecmascript)");
;
;
;
;
var createTrue = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('true', [], ()=>true);
var createFalse = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('false', [], ()=>false);
var createNull = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('null', [], ()=>null);
var createInfinity = /* #__PURE__ */ recreateFactory('Infinity', [
    'config',
    '?BigNumber'
], (_ref)=>{
    var { config, BigNumber } = _ref;
    return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
});
var createNaN = /* #__PURE__ */ recreateFactory('NaN', [
    'config',
    '?BigNumber'
], (_ref2)=>{
    var { config, BigNumber } = _ref2;
    return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
});
var createPi = /* #__PURE__ */ recreateFactory('pi', [
    'config',
    '?BigNumber'
], (_ref3)=>{
    var { config, BigNumber } = _ref3;
    return config.number === 'BigNumber' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBigNumberPi"])(BigNumber) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pi"];
});
var createTau = /* #__PURE__ */ recreateFactory('tau', [
    'config',
    '?BigNumber'
], (_ref4)=>{
    var { config, BigNumber } = _ref4;
    return config.number === 'BigNumber' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBigNumberTau"])(BigNumber) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tau"];
});
var createE = /* #__PURE__ */ recreateFactory('e', [
    'config',
    '?BigNumber'
], (_ref5)=>{
    var { config, BigNumber } = _ref5;
    return config.number === 'BigNumber' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBigNumberE"])(BigNumber) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"];
});
var createPhi = /* #__PURE__ */ recreateFactory('phi', [
    'config',
    '?BigNumber'
], (_ref6)=>{
    var { config, BigNumber } = _ref6;
    return config.number === 'BigNumber' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBigNumberPhi"])(BigNumber) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["phi"];
});
var createLN2 = /* #__PURE__ */ recreateFactory('LN2', [
    'config',
    '?BigNumber'
], (_ref7)=>{
    var { config, BigNumber } = _ref7;
    return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
});
var createLN10 = /* #__PURE__ */ recreateFactory('LN10', [
    'config',
    '?BigNumber'
], (_ref8)=>{
    var { config, BigNumber } = _ref8;
    return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
});
var createLOG2E = /* #__PURE__ */ recreateFactory('LOG2E', [
    'config',
    '?BigNumber'
], (_ref9)=>{
    var { config, BigNumber } = _ref9;
    return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
});
var createLOG10E = /* #__PURE__ */ recreateFactory('LOG10E', [
    'config',
    '?BigNumber'
], (_ref0)=>{
    var { config, BigNumber } = _ref0;
    return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
});
var createSQRT1_2 = /* #__PURE__ */ recreateFactory(// eslint-disable-line camelcase
'SQRT1_2', [
    'config',
    '?BigNumber'
], (_ref1)=>{
    var { config, BigNumber } = _ref1;
    return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
});
var createSQRT2 = /* #__PURE__ */ recreateFactory('SQRT2', [
    'config',
    '?BigNumber'
], (_ref10)=>{
    var { config, BigNumber } = _ref10;
    return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
});
var createI = /* #__PURE__ */ recreateFactory('i', [
    'Complex'
], (_ref11)=>{
    var { Complex } = _ref11;
    return Complex.I;
});
var createUppercasePi = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('PI', [
    'pi'
], (_ref12)=>{
    var { pi } = _ref12;
    return pi;
});
var createUppercaseE = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('E', [
    'e'
], (_ref13)=>{
    var { e } = _ref13;
    return e;
});
var createVersion = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])('version', [], ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$version$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["version"]);
// helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?
function recreateFactory(name, dependencies, create) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, create, {
        recreateOnConfigChange: true
    });
}
}}),
"[project]/node_modules/mathjs/lib/esm/error/DimensionError.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */ __turbopack_context__.s({
    "DimensionError": (()=>DimensionError)
});
function DimensionError(actual, expected, relation) {
    if (!(this instanceof DimensionError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.actual = actual;
    this.expected = expected;
    this.relation = relation;
    this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
    this.stack = new Error().stack;
}
DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;
}}),
"[project]/node_modules/mathjs/lib/esm/error/IndexError.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */ __turbopack_context__.s({
    "IndexError": (()=>IndexError)
});
function IndexError(index, min, max) {
    if (!(this instanceof IndexError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.index = index;
    if (arguments.length < 3) {
        this.min = 0;
        this.max = min;
    } else {
        this.min = min;
        this.max = max;
    }
    if (this.min !== undefined && this.index < this.min) {
        this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
    } else if (this.max !== undefined && this.index >= this.max) {
        this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
    } else {
        this.message = 'Index out of range (' + this.index + ')';
    }
    this.stack = new Error().stack;
}
IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;
}}),
"[project]/node_modules/mathjs/lib/esm/error/ArgumentsError.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */ __turbopack_context__.s({
    "ArgumentsError": (()=>ArgumentsError)
});
function ArgumentsError(fn, count, min, max) {
    if (!(this instanceof ArgumentsError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.fn = fn;
    this.count = count;
    this.min = min;
    this.max = max;
    this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
    this.stack = new Error().stack;
}
ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;
}}),
"[project]/node_modules/mathjs/lib/esm/json/replacer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createReplacer": (()=>createReplacer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
var name = 'replacer';
var dependencies = [];
var createReplacer = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, ()=>{
    /**
   * Stringify data types into their JSON representation.
   * Most data types can be serialized using their `.toJSON` method,
   * but not all, for example the number `Infinity`. For these cases you have
   * to use the replacer. Example usage:
   *
   *     JSON.stringify([2, Infinity], math.replacer)
   *
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the replaced object
   */ return function replacer(key, value) {
        // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
        if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {
            return {
                mathjs: 'number',
                value: String(value)
            };
        }
        if (typeof value === 'bigint') {
            return {
                mathjs: 'bigint',
                value: String(value)
            };
        }
        return value;
    };
});
}}),
}]);

//# sourceMappingURL=node_modules_mathjs_lib_esm_d2f0935f._.js.map