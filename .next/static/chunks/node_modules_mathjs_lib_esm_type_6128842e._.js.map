{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js"],"sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config\n  } = _ref;\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: Decimal.EUCLID\n  });\n  BigNumber.prototype = Object.create(BigNumber.prototype);\n\n  /**\n   * Attach type information\n   */\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n  return BigNumber;\n}, {\n  isClass: true\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAO;CAAS;AAC7B,IAAI,uBAAuB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC3E,IAAI,EACF,EAAE,EACF,MAAM,EACP,GAAG;IACJ,IAAI,YAAY,4IAAA,CAAA,UAAO,CAAC,KAAK,CAAC;QAC5B,WAAW,OAAO,SAAS;QAC3B,QAAQ,4IAAA,CAAA,UAAO,CAAC,MAAM;IACxB;IACA,UAAU,SAAS,GAAG,OAAO,MAAM,CAAC,UAAU,SAAS;IAEvD;;GAEC,GACD,UAAU,SAAS,CAAC,IAAI,GAAG;IAC3B,UAAU,SAAS,CAAC,WAAW,GAAG;IAElC;;;;;GAKC,GACD,UAAU,SAAS,CAAC,MAAM,GAAG;QAC3B,OAAO;YACL,QAAQ;YACR,OAAO,IAAI,CAAC,QAAQ;QACtB;IACF;IAEA;;;;;GAKC,GACD,UAAU,QAAQ,GAAG,SAAU,IAAI;QACjC,OAAO,IAAI,UAAU,KAAK,KAAK;IACjC;IACA,IAAI,IAAI;QACN,iFAAiF;QACjF,GAAG,UAAU,SAAU,IAAI,EAAE,IAAI;YAC/B,IAAI,KAAK,SAAS,KAAK,KAAK,SAAS,EAAE;gBACrC,UAAU,MAAM,CAAC;oBACf,WAAW,KAAK,SAAS;gBAC3B;YACF;QACF;IACF;IACA,OAAO;AACT,GAAG;IACD,SAAS;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/complex/Complex.js"],"sourcesContent":["import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Complex, 'name', {\n    value: 'Complex'\n  });\n  Complex.prototype.constructor = Complex;\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n    if (a.re < b.re) {\n      return -1;\n    }\n    if (a.im > b.im) {\n      return 1;\n    }\n    if (a.im < b.im) {\n      return -1;\n    }\n    return 0;\n  };\n  return Complex;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/unit/physicalConstants.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\n\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2'); // Deprecated in favor of coulombConstant\nexport var createCoulombConstant = /* #__PURE__ */unitFactory('coulombConstant', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// TODO spectralRadiance = 1.1910429723971881e-16 W m^2 sr^-1\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, _ref => {\n    var {\n      config,\n      Unit,\n      BigNumber\n    } = _ref;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, _ref2 => {\n    var {\n      config,\n      BigNumber\n    } = _ref2;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 407, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/fraction/Fraction.js"],"sourcesContent":["import Fraction from 'fraction.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Fraction';\nvar dependencies = [];\nexport var createFractionClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Fraction, 'name', {\n    value: 'Fraction'\n  });\n  Fraction.prototype.constructor = Fraction;\n  Fraction.prototype.type = 'Fraction';\n  Fraction.prototype.isFraction = true;\n\n  /**\n   * Get a JSON representation of a Fraction containing type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Fraction\", \"n\": \"3\", \"d\": \"8\"}`\n   */\n  Fraction.prototype.toJSON = function () {\n    return {\n      mathjs: 'Fraction',\n      n: String(this.s * this.n),\n      d: String(this.d)\n    };\n  };\n\n  /**\n   * Instantiate a Fraction from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"Fraction\", \"n\": \"3\", \"d\": \"8\"}`\n   * @return {BigNumber}\n   */\n  Fraction.fromJSON = function (json) {\n    return new Fraction(json);\n  };\n  return Fraction;\n}, {\n  isClass: true\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe,EAAE;AACd,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc;IAC1E;;GAEC,GACD,OAAO,cAAc,CAAC,sJAAA,CAAA,UAAQ,EAAE,QAAQ;QACtC,OAAO;IACT;IACA,sJAAA,CAAA,UAAQ,CAAC,SAAS,CAAC,WAAW,GAAG,sJAAA,CAAA,UAAQ;IACzC,sJAAA,CAAA,UAAQ,CAAC,SAAS,CAAC,IAAI,GAAG;IAC1B,sJAAA,CAAA,UAAQ,CAAC,SAAS,CAAC,UAAU,GAAG;IAEhC;;;;GAIC,GACD,sJAAA,CAAA,UAAQ,CAAC,SAAS,CAAC,MAAM,GAAG;QAC1B,OAAO;YACL,QAAQ;YACR,GAAG,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACzB,GAAG,OAAO,IAAI,CAAC,CAAC;QAClB;IACF;IAEA;;;;;GAKC,GACD,sJAAA,CAAA,UAAQ,CAAC,QAAQ,GAAG,SAAU,IAAI;QAChC,OAAO,IAAI,sJAAA,CAAA,UAAQ,CAAC;IACtB;IACA,OAAO,sJAAA,CAAA,UAAQ;AACjB,GAAG;IACD,SAAS;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/Matrix.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'Matrix';\nvar dependencies = [];\nexport var createMatrixClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  Matrix.prototype[Symbol.iterator] = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot iterate a Matrix interface');\n  };\n\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n  return Matrix;\n}, {\n  isClass: true\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe,EAAE;AACd,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc;IACxE;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,SAAS;QACP,IAAI,CAAC,CAAC,IAAI,YAAY,MAAM,GAAG;YAC7B,MAAM,IAAI,YAAY;QACxB;IACF;IAEA;;GAEC,GACD,OAAO,SAAS,CAAC,IAAI,GAAG;IACxB,OAAO,SAAS,CAAC,QAAQ,GAAG;IAE5B;;;;;;;GAOC,GACD,OAAO,SAAS,CAAC,OAAO,GAAG;QACzB,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;GAOC,GACD,OAAO,SAAS,CAAC,QAAQ,GAAG;QAC1B,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;GAIC,GACD,OAAO,SAAS,CAAC,MAAM,GAAG,SAAU,IAAI,EAAE,QAAQ;QAChD,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;;;;;;GAYC,GACD,OAAO,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK,EAAE,WAAW,EAAE,YAAY;QAClE,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;GAIC,GACD,OAAO,SAAS,CAAC,GAAG,GAAG,SAAU,KAAK;QACpC,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;;GAQC,GACD,OAAO,SAAS,CAAC,GAAG,GAAG,SAAU,KAAK,EAAE,KAAK,EAAE,YAAY;QACzD,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;;;;;GAWC,GACD,OAAO,SAAS,CAAC,MAAM,GAAG,SAAU,IAAI,EAAE,YAAY;QACpD,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;;GAQC,GACD,OAAO,SAAS,CAAC,OAAO,GAAG,SAAU,IAAI,EAAE,YAAY;QACrD,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;GAGC,GACD,OAAO,SAAS,CAAC,KAAK,GAAG;QACvB,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;GAGC,GACD,OAAO,SAAS,CAAC,IAAI,GAAG;QACtB,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;;;GASC,GACD,OAAO,SAAS,CAAC,GAAG,GAAG,SAAU,QAAQ,EAAE,SAAS;QAClD,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;GAKC,GACD,OAAO,SAAS,CAAC,OAAO,GAAG,SAAU,QAAQ;QAC3C,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;GAGC,GACD,OAAO,SAAS,CAAC,OAAO,QAAQ,CAAC,GAAG;QAClC,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;GAGC,GACD,OAAO,SAAS,CAAC,OAAO,GAAG;QACzB,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;GAGC,GACD,OAAO,SAAS,CAAC,OAAO,GAAG;QACzB,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;;GAOC,GACD,OAAO,SAAS,CAAC,MAAM,GAAG,SAAU,OAAO;QACzC,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA;;;GAGC,GACD,OAAO,SAAS,CAAC,QAAQ,GAAG;QAC1B,4DAA4D;QAC5D,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT,GAAG;IACD,SAAS;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/Range.js"],"sourcesContent":["import { isBigInt, isBigNumber } from '../../utils/is.js';\nimport { format, sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Range';\nvar dependencies = [];\nexport var createRangeClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Create a range of numbers. A range has a start, step, and end,\n   * and contains functions to iterate over the range.\n   *\n   * A range can be constructed as:\n   *\n   *     const range = new Range(start, end)\n   *     const range = new Range(start, end, step)\n   *\n   * Note that the endpoints and step may be specified with other numeric\n   * types such as bigint or BigNumber, but they will be demoted to the\n   * built-in `number` type and the Range will only contain numbers. The\n   * rationale for this demotion is that Range objects are primarily used\n   * for indexing Matrix objects, and Matrix objects may only be indexed\n   * with `number`s.\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x)\n   *     })\n   *     range.map(function (x) {\n   *         return math.sin(x)\n   *     })\n   *     range.toArray()\n   *\n   * Example usage:\n   *\n   *     const c = new Range(2, 6)       // 2:1:5\n   *     c.toArray()                     // [2, 3, 4, 5]\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    var hasStart = start !== null && start !== undefined;\n    var hasEnd = end !== null && end !== undefined;\n    var hasStep = step !== null && step !== undefined;\n    if (hasStart) {\n      if (isBigNumber(start)) {\n        start = start.toNumber();\n      } else if (typeof start !== 'number' && !isBigInt(start)) {\n        throw new TypeError('Parameter start must be a number or bigint');\n      }\n    }\n    if (hasEnd) {\n      if (isBigNumber(end)) {\n        end = end.toNumber();\n      } else if (typeof end !== 'number' && !isBigInt(end)) {\n        throw new TypeError('Parameter end must be a number or bigint');\n      }\n    }\n    if (hasStep) {\n      if (isBigNumber(step)) {\n        step = step.toNumber();\n      } else if (typeof step !== 'number' && !isBigInt(step)) {\n        throw new TypeError('Parameter step must be a number or bigint');\n      }\n    }\n    this.start = hasStart ? parseFloat(start) : 0;\n    this.end = hasEnd ? parseFloat(end) : 0;\n    this.step = hasStep ? parseFloat(step) : 1;\n  }\n\n  /**\n   * Attach type information\n   */\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n  Range.prototype.size = function () {\n    var len = 0;\n    var start = this.start;\n    var step = this.step;\n    var end = this.end;\n    var diff = end - start;\n    if (sign(step) === sign(diff)) {\n      len = Math.ceil(diff / step);\n    } else if (diff === 0) {\n      len = 0;\n    }\n    if (isNaN(len)) {\n      len = 0;\n    }\n    return [len];\n  };\n\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      } else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      } else {\n        // negative step\n        return this.start;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    } else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Range.prototype.format = function (options) {\n    var str = format(this.start, options);\n    if (this.step !== 1) {\n      str += ':' + format(this.step, options);\n    }\n    str += ':' + format(this.end, options);\n    return str;\n  };\n\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n  return Range;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 969, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/resultset/ResultSet.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'ResultSet';\nvar dependencies = [];\nexport var createResultSet = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.entries = entries || [];\n  }\n\n  /**\n   * Attach type information\n   */\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.map(String).join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n  return ResultSet;\n}, {\n  isClass: true\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe,EAAE;AACd,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc;IACtE;;;;;GAKC,GACD,SAAS,UAAU,OAAO;QACxB,IAAI,CAAC,CAAC,IAAI,YAAY,SAAS,GAAG;YAChC,MAAM,IAAI,YAAY;QACxB;QACA,IAAI,CAAC,OAAO,GAAG,WAAW,EAAE;IAC9B;IAEA;;GAEC,GACD,UAAU,SAAS,CAAC,IAAI,GAAG;IAC3B,UAAU,SAAS,CAAC,WAAW,GAAG;IAElC;;;;GAIC,GACD,UAAU,SAAS,CAAC,OAAO,GAAG;QAC5B,OAAO,IAAI,CAAC,OAAO;IACrB;IAEA;;;;GAIC,GACD,UAAU,SAAS,CAAC,QAAQ,GAAG;QAC7B,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,QAAQ;IACrD;IAEA;;;;;GAKC,GACD,UAAU,SAAS,CAAC,MAAM,GAAG;QAC3B,OAAO;YACL,QAAQ;YACR,SAAS,IAAI,CAAC,OAAO;QACvB;IACF;IAEA;;;;;;GAMC,GACD,UAAU,QAAQ,GAAG,SAAU,IAAI;QACjC,OAAO,IAAI,UAAU,KAAK,OAAO;IACnC;IACA,OAAO;AACT,GAAG;IACD,SAAS;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1036, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js"],"sourcesContent":["// deno-lint-ignore-file no-this-alias\nimport { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex, broadcastTo, get } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { optimizeCallback } from '../../utils/optimizeCallback.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    return get(this._data, index);\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      var returnMatrix = new DenseMatrix([]);\n      var submatrix = _getSubmatrix(matrix._data, index);\n      returnMatrix._size = submatrix.size;\n      returnMatrix._datatype = matrix._datatype;\n      returnMatrix._data = submatrix.data;\n      return returnMatrix;\n    }\n  }\n\n  /**\n   * Get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index) {\n    var maxDepth = index.size().length - 1;\n    var size = Array(maxDepth);\n    return {\n      data: getSubmatrixRecursive(data),\n      size\n    };\n    function getSubmatrixRecursive(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var ranges = index.dimension(depth);\n      size[depth] = ranges.size()[0];\n      if (depth < maxDepth) {\n        return ranges.map(rangeIndex => {\n          validateIndex(rangeIndex, data.length);\n          return getSubmatrixRecursive(data[rangeIndex], depth + 1);\n        }).valueOf();\n      } else {\n        return ranges.map(rangeIndex => {\n          validateIndex(rangeIndex, data.length);\n          return data[rangeIndex];\n        }).valueOf();\n      }\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // broadcast submatrix\n      if (!deepStrictEqual(sSize, iSize)) {\n        try {\n          if (sSize.length === 0) {\n            submatrix = broadcastTo([submatrix], iSize);\n          } else {\n            submatrix = broadcastTo(submatrix, iSize);\n          }\n          sSize = arraySize(submatrix);\n        } catch (_unused) {}\n      }\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      _setSubmatrix(matrix._data, index, submatrix);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix) {\n    var maxDepth = index.size().length - 1;\n    setSubmatrixRecursive(data, submatrix);\n    function setSubmatrixRecursive(data, submatrix) {\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var range = index.dimension(depth);\n      if (depth < maxDepth) {\n        range.forEach((rangeIndex, i) => {\n          validateIndex(rangeIndex, data.length);\n          setSubmatrixRecursive(data[rangeIndex], submatrix[i[0]], depth + 1);\n        });\n      } else {\n        range.forEach((rangeIndex, i) => {\n          validateIndex(rangeIndex, data.length);\n          data[rangeIndex] = submatrix[i[0]];\n        });\n      }\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} skipZeros   If true, the callback function is invoked only for non-zero entries\n   * @param {boolean} isUnary     If true, the callback function is invoked with one parameter\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    var skipZeros = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isUnary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var me = this;\n    var maxDepth = me._size.length - 1;\n    if (maxDepth < 0) return me.clone();\n    var fastCallback = optimizeCallback(callback, me, 'map', isUnary);\n    var fastCallbackFn = fastCallback.fn;\n    var result = me.create(undefined, me._datatype);\n    result._size = me._size;\n    if (isUnary || fastCallback.isUnary) {\n      result._data = iterateUnary(me._data);\n      return result;\n    }\n    if (maxDepth === 0) {\n      var inputData = me.valueOf();\n      var data = Array(inputData.length);\n      for (var i = 0; i < inputData.length; i++) {\n        data[i] = fastCallbackFn(inputData[i], [i], me);\n      }\n      result._data = data;\n      return result;\n    }\n    var index = [];\n    result._data = iterate(me._data);\n    return result;\n    function iterate(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = Array(data.length);\n      if (depth < maxDepth) {\n        for (var _i = 0; _i < data.length; _i++) {\n          index[depth] = _i;\n          result[_i] = iterate(data[_i], depth + 1);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < data.length; _i2++) {\n          index[depth] = _i2;\n          result[_i2] = fastCallbackFn(data[_i2], index.slice(), me);\n        }\n      }\n      return result;\n    }\n    function iterateUnary(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = Array(data.length);\n      if (depth < maxDepth) {\n        for (var _i3 = 0; _i3 < data.length; _i3++) {\n          result[_i3] = iterateUnary(data[_i3], depth + 1);\n        }\n      } else {\n        for (var _i4 = 0; _i4 < data.length; _i4++) {\n          result[_i4] = fastCallbackFn(data[_i4]);\n        }\n      }\n      return result;\n    }\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} skipZeros   If true, the callback function is invoked only for non-zero entries\n   * @param {boolean} isUnary     If true, the callback function is invoked with one parameter\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    var skipZeros = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isUnary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var me = this;\n    var maxDepth = me._size.length - 1;\n    if (maxDepth < 0) return;\n    var fastCallback = optimizeCallback(callback, me, 'map', isUnary);\n    var fastCallbackFn = fastCallback.fn;\n    if (isUnary || fastCallback.isUnary) {\n      iterateUnary(me._data);\n      return;\n    }\n    if (maxDepth === 0) {\n      for (var i = 0; i < me._data.length; i++) {\n        fastCallbackFn(me._data[i], [i], me);\n      }\n      return;\n    }\n    var index = [];\n    iterate(me._data);\n    function iterate(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (depth < maxDepth) {\n        for (var _i5 = 0; _i5 < data.length; _i5++) {\n          index[depth] = _i5;\n          iterate(data[_i5], depth + 1);\n        }\n      } else {\n        for (var _i6 = 0; _i6 < data.length; _i6++) {\n          index[depth] = _i6;\n          fastCallbackFn(data[_i6], index.slice(), me);\n        }\n      }\n    }\n    function iterateUnary(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (depth < maxDepth) {\n        for (var _i7 = 0; _i7 < data.length; _i7++) {\n          iterateUnary(data[_i7], depth + 1);\n        }\n      } else {\n        for (var _i8 = 0; _i8 < data.length; _i8++) {\n          fastCallbackFn(data[_i8]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var maxDepth = this._size.length - 1;\n    if (maxDepth < 0) {\n      return;\n    }\n    if (maxDepth === 0) {\n      for (var i = 0; i < this._data.length; i++) {\n        yield {\n          value: this._data[i],\n          index: [i]\n        };\n      }\n      return;\n    }\n\n    // Multi-dimensional matrix: iterate over all elements\n    var index = Array(maxDepth + 1).fill(0);\n    var totalElements = this._size.reduce((a, b) => a * b, 1);\n    for (var count = 0; count < totalElements; count++) {\n      // Traverse to the current element using indices\n      var current = this._data;\n      for (var d = 0; d < maxDepth; d++) {\n        current = current[index[d]];\n      }\n      yield {\n        value: current[index[maxDepth]],\n        index: index.slice()\n      };\n\n      // Increment indices for next element\n      for (var _d = maxDepth; _d >= 0; _d--) {\n        index[_d]++;\n        if (index[_d] < this._size[_d]) break;\n        index[_d] = 0;\n      }\n    }\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Clones all (nested) Arrays, and replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array | Matrix} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    if (isMatrix(data)) {\n      return preprocess(data.valueOf());\n    }\n    if (isArray(data)) {\n      return data.map(preprocess);\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2004, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/bigint.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'bigint';\nvar dependencies = ['typed'];\nexport var createBigint = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a bigint or convert a string, boolean, or unit to a bigint.\n   * When value is a matrix, all elements will be converted to bigint.\n   *\n   * Syntax:\n   *\n   *    math.bigint(value)\n   *\n   * Examples:\n   *\n   *    math.bigint(2)                         // returns 2n\n   *    math.bigint('123')                     // returns 123n\n   *    math.bigint(true)                      // returns 1n\n   *    math.bigint([true, false, true, true]) // returns [1n, 0n, 1n, 1n]\n   *\n   * See also:\n   *\n   *    number, bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | bigint | Fraction | boolean | Array | Matrix | null} [value]  Value to be converted\n   * @return {bigint | Array | Matrix} The created bigint\n   */\n  var bigint = typed('bigint', {\n    '': function _() {\n      return 0n;\n    },\n    bigint: function bigint(x) {\n      return x;\n    },\n    number: function number(x) {\n      return BigInt(x.toFixed());\n    },\n    BigNumber: function BigNumber(x) {\n      return BigInt(x.round().toString());\n    },\n    Fraction: function Fraction(x) {\n      return BigInt(x.valueOf().toFixed());\n    },\n    'string | boolean': function string__boolean(x) {\n      return BigInt(x);\n    },\n    null: function _null(x) {\n      return 0n;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"bigint\",\"value\":\"123\"}\n  //\n  // into a bigint 123n\n  bigint.fromJSON = function (json) {\n    return BigInt(json.value);\n  };\n  return bigint;\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,IAAI,SAAS,MAAM,UAAU;QAC3B,IAAI,SAAS;YACX,OAAO,EAAE;QACX;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO;QACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,OAAO,EAAE,OAAO;QACzB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,OAAO,EAAE,KAAK,GAAG,QAAQ;QAClC;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO,OAAO,EAAE,OAAO,GAAG,OAAO;QACnC;QACA,oBAAoB,SAAS,gBAAgB,CAAC;YAC5C,OAAO,OAAO;QAChB;QACA,MAAM,SAAS,MAAM,CAAC;YACpB,OAAO,EAAE;QACX;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;IAEA,gDAAgD;IAChD,EAAE;IACF,wCAAwC;IACxC,EAAE;IACF,qBAAqB;IACrB,OAAO,QAAQ,GAAG,SAAU,IAAI;QAC9B,OAAO,OAAO,KAAK,KAAK;IAC1B;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2078, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/boolean.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'boolean';\nvar dependencies = ['typed'];\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    boolean: function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    null: function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      }\n\n      // test whether value is a valid number\n      var num = Number(x);\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,IAAI,SAAS;YACX,OAAO;QACT;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO;QACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,CAAC,CAAC;QACX;QACA,MAAM,SAAS,MAAM,CAAC;YACpB,OAAO;QACT;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,CAAC,EAAE,MAAM;QAClB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,uBAAuB;YACvB,IAAI,QAAQ,EAAE,WAAW;YACzB,IAAI,UAAU,QAAQ;gBACpB,OAAO;YACT,OAAO,IAAI,UAAU,SAAS;gBAC5B,OAAO;YACT;YAEA,uCAAuC;YACvC,IAAI,MAAM,OAAO;YACjB,IAAI,MAAM,MAAM,CAAC,MAAM,MAAM;gBAC3B,OAAO,CAAC,CAAC;YACX;YACA,MAAM,IAAI,MAAM,qBAAqB,IAAI;QAC3C;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2157, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/complex/function/complex.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex\n  } = _ref;\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function number_number(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumber_BigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    null: function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAU;AAChC,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCC,GACD,OAAO,MAAM,WAAW;QACtB,IAAI,SAAS;YACX,OAAO,QAAQ,IAAI;QACrB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,QAAQ,GAAG;QACxB;QACA,kBAAkB,SAAS,cAAc,EAAE,EAAE,EAAE;YAC7C,OAAO,IAAI,QAAQ,IAAI;QACzB;QACA,2CAA2C;QAC3C,wBAAwB,SAAS,oBAAoB,EAAE,EAAE,EAAE;YACzD,OAAO,IAAI,QAAQ,GAAG,QAAQ,IAAI,GAAG,QAAQ;QAC/C;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO,IAAI,QAAQ,EAAE,OAAO,IAAI;QAClC;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,QAAQ,IAAI,uBAAuB;QAC5C;QACA,MAAM,SAAS,MAAM,CAAC;YACpB,OAAO,QAAQ;QACjB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,QAAQ,KAAK,QAAQ,GAAG;gBAC1B,OAAO,IAAI,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE;YAC/B;YACA,IAAI,OAAO,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,GAAG;gBACtD,OAAO,IAAI,QAAQ;YACrB;YACA,MAAM,IAAI,MAAM;QAClB;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2252, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/number.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n  var result = n + f;\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is not a valid number');\n  }\n  return result;\n}\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, bigint, boolean, numeric, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is not a valid number');\n      }\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        // check if the bit at index size - 1 is set and if so do the twos complement\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    bigint: function bigint(x) {\n      return Number(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: typed.referToSelf(self => x => {\n      var clone = x.clone();\n      clone.value = self(x.value);\n      return clone;\n    }),\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function Unit_string__Unit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n  return number;\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AAE5B;;;;CAIC,GACD,SAAS,yBAAyB,KAAK;IACrC,IAAI,2BAA2B,MAAM,KAAK,CAAC;IAC3C,IAAI,0BAA0B;QAC5B,IAAI,QAAQ;YACV,MAAM;YACN,MAAM;YACN,MAAM;QACR,CAAC,CAAC,wBAAwB,CAAC,EAAE,CAAC;QAC9B,IAAI,cAAc,wBAAwB,CAAC,EAAE;QAC7C,IAAI,iBAAiB,wBAAwB,CAAC,EAAE;QAChD,OAAO;YACL;YACA;YACA;YACA;QACF;IACF,OAAO;QACL,OAAO;IACT;AACF;AAEA;;;;CAIC,GACD,SAAS,8BAA8B,KAAK;IAC1C,IAAI,IAAI,SAAS,MAAM,WAAW,EAAE,MAAM,KAAK;IAC/C,IAAI,IAAI;IACR,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,cAAc,CAAC,MAAM,EAAE,IAAK;QACpD,IAAI,aAAa,SAAS,MAAM,cAAc,CAAC,EAAE,EAAE,MAAM,KAAK;QAC9D,KAAK,aAAa,KAAK,GAAG,CAAC,MAAM,KAAK,EAAE,IAAI;IAC9C;IACA,IAAI,SAAS,IAAI;IACjB,IAAI,MAAM,SAAS;QACjB,MAAM,IAAI,YAAY,aAAa,MAAM,KAAK,GAAG;IACnD;IACA,OAAO;AACT;AACO,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,IAAI,SAAS,MAAM,UAAU;QAC3B,IAAI,SAAS;YACX,OAAO;QACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO;QACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,MAAM,OAAO,OAAO;YACxB,IAAI,wBAAwB,yBAAyB;YACrD,IAAI,uBAAuB;gBACzB,OAAO,8BAA8B;YACvC;YACA,IAAI,OAAO;YACX,IAAI,sBAAsB,EAAE,KAAK,CAAC;YAClC,IAAI,qBAAqB;gBACvB,yDAAyD;gBACzD,kCAAkC;gBAClC,OAAO,OAAO,mBAAmB,CAAC,EAAE;gBACpC,IAAI,mBAAmB,CAAC,EAAE;YAC5B;YACA,IAAI,MAAM,OAAO;YACjB,IAAI,MAAM,MAAM;gBACd,MAAM,IAAI,YAAY,aAAa,IAAI;YACzC;YACA,IAAI,qBAAqB;gBACvB,yCAAyC;gBACzC,+DAA+D;gBAC/D,IAAI,MAAM,KAAK,OAAO,GAAG;oBACvB,uCAAuC;oBACvC,MAAM,IAAI,YAAY,YAAY,MAAM,CAAC,GAAG;gBAC9C;gBACA,6EAA6E;gBAC7E,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG;oBAC1B,MAAM,MAAM,KAAK;gBACnB;YACF;YACA,OAAO;QACT;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,QAAQ;QACnB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,OAAO;QAChB;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO,EAAE,OAAO;QAClB;QACA,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA;gBAC9B,IAAI,QAAQ,EAAE,KAAK;gBACnB,MAAM,KAAK,GAAG,KAAK,EAAE,KAAK;gBAC1B,OAAO;YACT;QACA,MAAM,SAAS,MAAM,CAAC;YACpB,OAAO;QACT;QACA,uBAAuB,SAAS,kBAAkB,IAAI,EAAE,aAAa;YACnE,OAAO,KAAK,QAAQ,CAAC;QACvB;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;IAEA,gDAAgD;IAChD,EAAE;IACF,wCAAwC;IACxC,EAAE;IACF,oBAAoB;IACpB,OAAO,QAAQ,GAAG,SAAU,IAAI;QAC9B,OAAO,WAAW,KAAK,KAAK;IAC9B;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2407, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js"],"sourcesContent":["import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { optimizeCallback } from '../../utils/optimizeCallback.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            }\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            }\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;\n      } while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  }\n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new SparseMatrix\n   */\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    }\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n\n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n\n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n\n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n\n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n\n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];\n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n\n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    }\n\n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // insert the sub matrix\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n    return matrix;\n  }\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n    return 0;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      if (!eq(v, zero)) {\n        // insert value @ (i, j)\n        _insert(k, i, j, v, this._values, this._index, this._ptr);\n      }\n    }\n    return this;\n  };\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    }\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    }\n    // we did not find row\n    return top;\n  }\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // check sizes\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n\n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }\n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    }\n\n    // check sizes\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1];\n\n    // m * n must not change\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    var fastCallback = optimizeCallback(callback, me, 'map');\n    // invoke callback\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      return fastCallback.fn(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n\n    // invoke callback\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      var value = callback(v, x, y);\n      // check value != 0\n      if (!eq(value, zero)) {\n        // store value\n        values.push(value);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k];\n          // check i is in range\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    }\n\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    var fastCallback = optimizeCallback(callback, me, 'forEach');\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k];\n\n          // value @ k\n          // TODO apply a non indexed version of algorithm in case fastCallback is not optimized\n          fastCallback.fn(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          fastCallback.fn(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n    var columns = this._size[1];\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;\n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values) {\n          values.splice(ky, 0, vx);\n        }\n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        }\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values) {\n          values.splice(kx, 0, vy);\n        }\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n  return SparseMatrix;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3828, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/unit/function/splitUnit.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'splitUnit';\nvar dependencies = ['typed'];\nexport var createSplitUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     math.splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  return typed(name, {\n    'Unit, Array': function Unit_Array(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,MAAM,MAAM;QACjB,eAAe,SAAS,WAAW,IAAI,EAAE,KAAK;YAC5C,OAAO,KAAK,SAAS,CAAC;QACxB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3869, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/string.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nimport { format } from '../utils/number.js';\nvar name = 'string';\nvar dependencies = ['typed'];\nexport var createString = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2)                // returns string '4.2'\n   *    math.string(math.complex(3, 2)) // returns string '3 + 2i'\n   *\n   *    const u = math.unit(5, 'km')\n   *    math.string(u.to('m'))          // returns string '5000 m'\n   *\n   *    math.string([true, false])      // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  return typed(name, {\n    '': function _() {\n      return '';\n    },\n    number: format,\n    null: function _null(x) {\n      return 'null';\n    },\n    boolean: function boolean(x) {\n      return x + '';\n    },\n    string: function string(x) {\n      return x;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),\n    any: function any(x) {\n      return String(x);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,MAAM;QACjB,IAAI,SAAS;YACX,OAAO;QACT;QACA,QAAQ,0JAAA,CAAA,SAAM;QACd,MAAM,SAAS,MAAM,CAAC;YACpB,OAAO;QACT;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,IAAI;QACb;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO;QACT;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;QAC5D,KAAK,SAAS,IAAI,CAAC;YACjB,OAAO,OAAO;QAChB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3934, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    number, bigint, boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | bigint | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    bigint: function bigint(x) {\n      return new BigNumber(x.toString());\n    },\n    Unit: typed.referToSelf(self => x => {\n      var clone = x.clone();\n      clone.value = self(x.value);\n      return clone;\n    }),\n    Fraction: function Fraction(x) {\n      return new BigNumber(String(x.n)).div(String(x.d)).times(String(x.s));\n    },\n    null: function _null(_x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,aAAa;QACxB,IAAI,SAAS;YACX,OAAO,IAAI,UAAU;QACvB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,4DAA4D;YAC5D,OAAO,IAAI,UAAU,IAAI;QAC3B;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,sBAAsB,EAAE,KAAK,CAAC;YAClC,IAAI,qBAAqB;gBACvB,2BAA2B;gBAC3B,IAAI,OAAO,mBAAmB,CAAC,EAAE;gBACjC,IAAI,IAAI,UAAU,mBAAmB,CAAC,EAAE;gBACxC,IAAI,aAAa,IAAI,UAAU,GAAG,GAAG,CAAC,OAAO;gBAC7C,IAAI,EAAE,EAAE,CAAC,WAAW,GAAG,CAAC,KAAK;oBAC3B,MAAM,IAAI,YAAY,YAAY,MAAM,CAAC,GAAG;gBAC9C;gBACA,IAAI,mBAAmB,IAAI,UAAU,GAAG,GAAG,CAAC,OAAO,QAAQ;gBAC3D,IAAI,EAAE,GAAG,CAAC,mBAAmB;oBAC3B,OAAO,EAAE,GAAG,CAAC;gBACf,OAAO;oBACL,OAAO;gBACT;YACF;YACA,OAAO,IAAI,UAAU;QACvB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,qCAAqC;YACrC,OAAO;QACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,UAAU,EAAE,QAAQ;QACjC;QACA,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA;gBAC9B,IAAI,QAAQ,EAAE,KAAK;gBACnB,MAAM,KAAK,GAAG,KAAK,EAAE,KAAK;gBAC1B,OAAO;YACT;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO,IAAI,UAAU,OAAO,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QACrE;QACA,MAAM,SAAS,MAAM,EAAE;YACrB,OAAO,IAAI,UAAU;QACvB;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4026, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/function/matrix.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function string_string(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;CAAe;AAC9D,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,YAAY,EACb,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCC,GACD,OAAO,MAAM,MAAM;QACjB,IAAI,SAAS;YACX,OAAO,QAAQ,EAAE;QACnB;QACA,QAAQ,SAAS,OAAO,MAAM;YAC5B,OAAO,QAAQ,EAAE,EAAE;QACrB;QACA,kBAAkB,SAAS,cAAc,MAAM,EAAE,QAAQ;YACvD,OAAO,QAAQ,EAAE,EAAE,QAAQ;QAC7B;QACA,OAAO,SAAS,MAAM,IAAI;YACxB,OAAO,QAAQ;QACjB;QACA,QAAQ,SAAS,OAAO,IAAI;YAC1B,OAAO,QAAQ,MAAM,KAAK,OAAO;QACnC;QACA,0BAA0B;QAC1B,kCAAkC;IACpC;;IAEA;;;;;;;GAOC,GACD,SAAS,QAAQ,IAAI,EAAE,MAAM,EAAE,QAAQ;QACrC,iCAAiC;QACjC,IAAI,WAAW,WAAW,WAAW,aAAa,WAAW,WAAW;YACtE,OAAO,IAAI,YAAY,MAAM;QAC/B;QACA,IAAI,WAAW,UAAU;YACvB,OAAO,IAAI,aAAa,MAAM;QAChC;QACA,MAAM,IAAI,UAAU,yBAAyB,KAAK,SAAS,CAAC,UAAU;IACxE;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4116, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/function/sparse.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Note that a Sparse Matrix is always 2-dimensional, so for example if\n   * you create one from a plain array of _n_ numbers, you get an _n_ by 1\n   * Sparse \"column vector\".\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *    let v = math.sparse([0, 0, 1])\n   *    v.size()                        // Array [3, 1]\n   *    v.get([2, 0])                   // number 1\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function Array__Matrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function Array__Matrix_string(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAe;AACrC,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,YAAY,EACb,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCC,GACD,OAAO,MAAM,MAAM;QACjB,IAAI,SAAS;YACX,OAAO,IAAI,aAAa,EAAE;QAC5B;QACA,QAAQ,SAAS,OAAO,QAAQ;YAC9B,OAAO,IAAI,aAAa,EAAE,EAAE;QAC9B;QACA,kBAAkB,SAAS,cAAc,IAAI;YAC3C,OAAO,IAAI,aAAa;QAC1B;QACA,0BAA0B,SAAS,qBAAqB,IAAI,EAAE,QAAQ;YACpE,OAAO,IAAI,aAAa,MAAM;QAChC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4181, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo02xDS0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo02xDS0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo02xDS0(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype || denseMatrix.getDataType();\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype || sparseMatrix._data === undefined ? sparseMatrix._datatype : sparseMatrix.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return sparseMatrix.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === denseMatrix._datatype && bdt === sparseMatrix._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4307, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo09xS0Sf.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo09xS0Sf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo09xS0Sf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo09xS0Sf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype || a._data === undefined ? a._datatype : a.getDataType();\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype || b._data === undefined ? b._datatype : b.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // column mark\n      var mark = j + 1;\n      // check we need to process values\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k];\n          // update workspace\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      }\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // check we need to process values\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero;\n          // invoke f\n          var vc = cf(avalues[k], vb);\n          // check zero value\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i);\n            // push value\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === a._datatype && bdt === b._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4458, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAc;AACpC,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC1E,IAAI,EACF,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,SAAS,cAAc,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO;QACnD,uBAAuB;QACvB,IAAI,UAAU,EAAE,OAAO;QACvB,IAAI,SAAS,EAAE,MAAM;QACrB,IAAI,OAAO,EAAE,IAAI;QACjB,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,MAAM,EAAE,SAAS;QAErB,2CAA2C;QAC3C,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM;QAClB;QAEA,iBAAiB;QACjB,IAAI,OAAO,KAAK,CAAC,EAAE;QACnB,IAAI,UAAU,KAAK,CAAC,EAAE;QAEtB,WAAW;QACX,IAAI;QACJ,yBAAyB;QACzB,IAAI,KAAK;QACT,aAAa;QACb,IAAI,OAAO;QACX,4BAA4B;QAC5B,IAAI,KAAK;QAET,qBAAqB;QACrB,IAAI,OAAO,QAAQ,UAAU;YAC3B,WAAW;YACX,KAAK;YACL,uCAAuC;YACvC,KAAK,MAAM,IAAI,CAAC,aAAa;gBAAC;gBAAI;aAAG;YACrC,iCAAiC;YACjC,OAAO,MAAM,OAAO,CAAC,GAAG;YACxB,iCAAiC;YACjC,IAAI,MAAM,OAAO,CAAC,GAAG;YACrB,WAAW;YACX,KAAK,MAAM,IAAI,CAAC,UAAU;gBAAC;gBAAI;aAAG;QACpC;QAEA,gBAAgB;QAChB,IAAI,UAAU,EAAE;QAChB,IAAI,SAAS,EAAE;QACf,IAAI,OAAO,EAAE;QAEb,eAAe;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;YAChC,iBAAiB;YACjB,IAAI,CAAC,EAAE,GAAG,OAAO,MAAM;YACvB,cAAc;YACd,IAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,IAAI,IAAI,IAAI,IAAK;gBAC5D,MAAM;gBACN,IAAI,IAAI,MAAM,CAAC,EAAE;gBACjB,kBAAkB;gBAClB,IAAI,IAAI,UAAU,GAAG,GAAG,OAAO,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,EAAE,EAAE;gBACrD,sBAAsB;gBACtB,IAAI,CAAC,GAAG,GAAG,OAAO;oBAChB,qBAAqB;oBACrB,OAAO,IAAI,CAAC;oBACZ,QAAQ,IAAI,CAAC;gBACf;YACF;QACF;QACA,aAAa;QACb,IAAI,CAAC,QAAQ,GAAG,OAAO,MAAM;QAE7B,uBAAuB;QACvB,OAAO,EAAE,kBAAkB,CAAC;YAC1B,QAAQ;YACR,OAAO;YACP,KAAK;YACL,MAAM;gBAAC;gBAAM;aAAQ;YACrB,UAAU;QACZ;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4572, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo13xDD.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo13xDD';\nvar dependencies = ['typed'];\nexport var createMatAlgo13xDD = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  return function matAlgo13xDD(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b arrays\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // c arrays\n    var csize = [];\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // validate each one of the dimension sizes\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      }\n      // update dimension in c\n      csize[s] = asize[s];\n    }\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n    return cv;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;GAaC,GACD,OAAO,SAAS,aAAa,CAAC,EAAE,CAAC,EAAE,QAAQ;QACzC,WAAW;QACX,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,MAAM,EAAE,SAAS;QACrB,WAAW;QACX,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,MAAM,EAAE,SAAS;QACrB,WAAW;QACX,IAAI,QAAQ,EAAE;QAEd,sBAAsB;QACtB,IAAI,MAAM,MAAM,KAAK,MAAM,MAAM,EAAE;YACjC,MAAM,IAAI,kKAAA,CAAA,iBAAc,CAAC,MAAM,MAAM,EAAE,MAAM,MAAM;QACrD;QAEA,2CAA2C;QAC3C,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;YACrC,aAAa;YACb,IAAI,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE;gBACzB,MAAM,IAAI,WAAW,mCAAmC,QAAQ,4BAA4B,QAAQ;YACtG;YACA,wBAAwB;YACxB,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE;QACrB;QAEA,WAAW;QACX,IAAI;QACJ,4BAA4B;QAC5B,IAAI,KAAK;QAET,qBAAqB;QACrB,IAAI,OAAO,QAAQ,YAAY,QAAQ,KAAK;YAC1C,WAAW;YACX,KAAK;YACL,WAAW;YACX,KAAK,MAAM,IAAI,CAAC,UAAU;gBAAC;gBAAI;aAAG;QACpC;QAEA,6CAA6C;QAC7C,IAAI,QAAQ,MAAM,MAAM,GAAG,IAAI,SAAS,IAAI,GAAG,OAAO,KAAK,CAAC,EAAE,EAAE,OAAO,SAAS,EAAE;QAElF,WAAW;QACX,OAAO,EAAE,iBAAiB,CAAC;YACzB,MAAM;YACN,MAAM;YACN,UAAU;QACZ;IACF;;IAEA,qBAAqB;IACrB,SAAS,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;QACtC,kCAAkC;QAClC,IAAI,KAAK,EAAE;QACX,gCAAgC;QAChC,IAAI,UAAU,EAAE,MAAM,GAAG,GAAG;YAC1B,4BAA4B;YAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBAC1B,kCAAkC;gBAClC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE;YACxB;QACF,OAAO;YACL,wBAAwB;YACxB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBAC1B,qBAAqB;gBACrB,EAAE,CAAC,EAAE,GAAG,SAAS,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE;YAC9D;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4673, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { clone } from '../../../utils/object.js';\nvar name = 'matAlgo14xDs';\nvar dependencies = ['typed'];\nexport var createMatAlgo14xDs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  return function matAlgo14xDs(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n    return cv;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;GAcC,GACD,OAAO,SAAS,aAAa,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO;QAClD,WAAW;QACX,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,MAAM,EAAE,SAAS;QAErB,WAAW;QACX,IAAI;QACJ,4BAA4B;QAC5B,IAAI,KAAK;QAET,qBAAqB;QACrB,IAAI,OAAO,QAAQ,UAAU;YAC3B,WAAW;YACX,KAAK;YACL,iCAAiC;YACjC,IAAI,MAAM,OAAO,CAAC,GAAG;YACrB,WAAW;YACX,KAAK,MAAM,IAAI,CAAC,UAAU;gBAAC;gBAAI;aAAG;QACpC;QAEA,6CAA6C;QAC7C,IAAI,QAAQ,MAAM,MAAM,GAAG,IAAI,SAAS,IAAI,GAAG,OAAO,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,WAAW,EAAE;QAEvF,WAAW;QACX,OAAO,EAAE,iBAAiB,CAAC;YACzB,MAAM;YACN,MAAM,CAAA,GAAA,0JAAA,CAAA,QAAK,AAAD,EAAE;YACZ,UAAU;QACZ;IACF;;IAEA,qBAAqB;IACrB,SAAS,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO;QAC/C,kCAAkC;QAClC,IAAI,KAAK,EAAE;QACX,gCAAgC;QAChC,IAAI,UAAU,EAAE,MAAM,GAAG,GAAG;YAC1B,4BAA4B;YAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBAC1B,kCAAkC;gBAClC,EAAE,CAAC,EAAE,GAAG,UAAU,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;YAC5C;QACF,OAAO;YACL,wBAAwB;YACxB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBAC1B,qBAAqB;gBACrB,EAAE,CAAC,EAAE,GAAG,SAAS,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,IAAI;YAC7D;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4758, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/broadcast.js"],"sourcesContent":["import { broadcastSizes, broadcastTo } from '../../../utils/array.js';\nimport { deepStrictEqual } from '../../../utils/object.js';\n\n/**\n* Broadcasts two matrices, and return both in an array\n* It checks if it's possible with broadcasting rules\n*\n* @param {Matrix}   A      First Matrix\n* @param {Matrix}   B      Second Matrix\n*\n* @return {Matrix[]}      [ broadcastedA, broadcastedB ]\n*/\n\nexport function broadcast(A, B) {\n  if (deepStrictEqual(A.size(), B.size())) {\n    // If matrices have the same size return them\n    return [A, B];\n  }\n\n  // calculate the broadcasted sizes\n  var newSize = broadcastSizes(A.size(), B.size());\n\n  // return the array with the two broadcasted matrices\n  return [A, B].map(M => _broadcastTo(M, newSize));\n}\n\n/**\n * Broadcasts a matrix to the given size.\n *\n * @param {Matrix} M - The matrix to be broadcasted.\n * @param {number[]} size - The desired size of the broadcasted matrix.\n * @returns {Matrix} The broadcasted matrix.\n * @throws {Error} If the size parameter is not an array of numbers.\n */\nfunction _broadcastTo(M, size) {\n  if (deepStrictEqual(M.size(), size)) {\n    return M;\n  }\n  return M.create(broadcastTo(M.valueOf(), size), M.datatype());\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAYO,SAAS,UAAU,CAAC,EAAE,CAAC;IAC5B,IAAI,CAAA,GAAA,0JAAA,CAAA,kBAAe,AAAD,EAAE,EAAE,IAAI,IAAI,EAAE,IAAI,KAAK;QACvC,6CAA6C;QAC7C,OAAO;YAAC;YAAG;SAAE;IACf;IAEA,kCAAkC;IAClC,IAAI,UAAU,CAAA,GAAA,yJAAA,CAAA,iBAAc,AAAD,EAAE,EAAE,IAAI,IAAI,EAAE,IAAI;IAE7C,qDAAqD;IACrD,OAAO;QAAC;QAAG;KAAE,CAAC,GAAG,CAAC,CAAA,IAAK,aAAa,GAAG;AACzC;AAEA;;;;;;;CAOC,GACD,SAAS,aAAa,CAAC,EAAE,IAAI;IAC3B,IAAI,CAAA,GAAA,0JAAA,CAAA,kBAAe,AAAD,EAAE,EAAE,IAAI,IAAI,OAAO;QACnC,OAAO;IACT;IACA,OAAO,EAAE,MAAM,CAAC,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD,EAAE,EAAE,OAAO,IAAI,OAAO,EAAE,QAAQ;AAC5D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4800, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nimport { broadcast } from './broadcast.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(x, y), elop),\n        'Array, Array': (x, y) => matAlgo13xDD(...broadcast(matrix(x), matrix(y)), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(matrix(x), y), elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(...broadcast(x, matrix(y)), elop)\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(...broadcast(x, y), elop, false);\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(...broadcast(x, y), elop, false);\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(...broadcast(matrix(x), y), elop, false);\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(...broadcast(y, x), elop, true);\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(...broadcast(matrix(y), x), elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(x, y), self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(matrix(x), matrix(y)), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(matrix(x), y), self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(x, matrix(y)), self);\n        })\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(...broadcast(x, y), self, false);\n        });\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(...broadcast(x, y), self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(...broadcast(matrix(x), y), self, false);\n        });\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(...broadcast(y, x), self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(...broadcast(matrix(y), x), self, true);\n        });\n      }\n    }\n\n    // Now add the scalars\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    }\n    // Also pull in the scalar signatures if the operator is a typed function\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n    return matrixSignatures;\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4963, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo03xDSf';\nvar dependencies = ['typed'];\nexport var createMatAlgo03xDSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo03xDSf(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype || denseMatrix.getDataType();\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype || sparseMatrix._data === undefined ? sparseMatrix._datatype : sparseMatrix.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (DenseMatrix)\n    var cdata = [];\n\n    // initialize dense matrix\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      }\n      // process workspace\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: adt === denseMatrix._datatype && bdt === sparseMatrix._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5090, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo07xSSf';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createMatAlgo07xSSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    SparseMatrix\n  } = _ref;\n  /**\n  * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n  * Callback function invoked MxN times.\n  *\n  * C(i,j) = f(Aij, Bij)\n  *\n  * @param {Matrix}   a                 The SparseMatrix instance (A)\n  * @param {Matrix}   b                 The SparseMatrix instance (B)\n  * @param {Function} callback          The f(Aij,Bij) operation to invoke\n  *\n  * @return {Matrix}                    SparseMatrix (C)\n  *\n  * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n  */\n  return function matAlgo07xSSf(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype || a._data === undefined ? a._datatype : a.getDataType();\n    var bsize = b._size;\n    var bdt = b._datatype || b._data === undefined ? b._datatype : b.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    var zero = 0;\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      dt = adt;\n      zero = typed.convert(0, dt);\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays for sparse format\n    var cvalues = [];\n    var cindex = [];\n    var cptr = new Array(columns + 1).fill(0); // Start with column pointer array\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var mark = j + 1;\n      var nonZeroCount = 0;\n      _scatter(a, j, wa, xa, mark);\n      _scatter(b, j, wb, xb, mark);\n\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n\n        // invoke callback\n        var cij = cf(va, vb);\n        // Store all non zero and true values\n        if (cij !== 0 && cij !== false) {\n          cindex.push(i); // row index\n          cvalues.push(cij); // computed value\n          nonZeroCount++;\n        }\n      }\n\n      // Update column pointer with cumulative count of non-zero values\n      cptr[j + 1] = cptr[j] + nonZeroCount;\n    }\n\n    // Return the result as a sparse matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === a._datatype && bdt === b._datatype ? dt : undefined\n    });\n  };\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5211, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo12xSfs';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo12xSfs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo12xSfs(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAc;AACpC,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC1E,IAAI,EACF,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,SAAS,cAAc,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO;QACnD,uBAAuB;QACvB,IAAI,UAAU,EAAE,OAAO;QACvB,IAAI,SAAS,EAAE,MAAM;QACrB,IAAI,OAAO,EAAE,IAAI;QACjB,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,MAAM,EAAE,SAAS;QAErB,2CAA2C;QAC3C,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM;QAClB;QAEA,iBAAiB;QACjB,IAAI,OAAO,KAAK,CAAC,EAAE;QACnB,IAAI,UAAU,KAAK,CAAC,EAAE;QAEtB,WAAW;QACX,IAAI;QACJ,4BAA4B;QAC5B,IAAI,KAAK;QAET,qBAAqB;QACrB,IAAI,OAAO,QAAQ,UAAU;YAC3B,WAAW;YACX,KAAK;YACL,iCAAiC;YACjC,IAAI,MAAM,OAAO,CAAC,GAAG;YACrB,WAAW;YACX,KAAK,MAAM,IAAI,CAAC,UAAU;gBAAC;gBAAI;aAAG;QACpC;QAEA,gBAAgB;QAChB,IAAI,QAAQ,EAAE;QAEd,aAAa;QACb,IAAI,IAAI,EAAE;QACV,2DAA2D;QAC3D,IAAI,IAAI,EAAE;QAEV,eAAe;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;YAChC,eAAe;YACf,IAAI,OAAO,IAAI;YACf,cAAc;YACd,IAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,IAAI,IAAI,IAAI,IAAK;gBAC5D,MAAM;gBACN,IAAI,IAAI,MAAM,CAAC,EAAE;gBACjB,mBAAmB;gBACnB,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE;gBACjB,CAAC,CAAC,EAAE,GAAG;YACT;YACA,YAAY;YACZ,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;gBAC7B,+BAA+B;gBAC/B,IAAI,MAAM,GAAG;oBACX,mBAAmB;oBACnB,KAAK,CAAC,EAAE,GAAG,EAAE;gBACf;gBACA,wCAAwC;gBACxC,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM;oBACjB,4BAA4B;oBAC5B,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,EAAE,EAAE;gBACjD,OAAO;oBACL,4BAA4B;oBAC5B,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,UAAU,GAAG,GAAG,KAAK,GAAG,GAAG;gBAC3C;YACF;QACF;QAEA,sBAAsB;QACtB,OAAO,IAAI,YAAY;YACrB,MAAM;YACN,MAAM;gBAAC;gBAAM;aAAQ;YACrB,UAAU;QACZ;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5323, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/fraction/function/fraction.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n  /**\n   * Create a fraction or convert a value to a fraction.\n   *\n   * With one numeric argument, produces the closest rational approximation to the\n   * input.\n   * With two arguments, the first is the numerator and the second is the denominator,\n   * and creates the corresponding fraction. Both numerator and denominator must be\n   * integers.\n   * With one object argument, looks for the integer numerator as the value of property\n   * 'n' and the integer denominator as the value of property 'd'.\n   * With a matrix argument, creates a matrix of the same shape with entries\n   * converted into fractions.\n   *\n   * Syntax:\n   *     math.fraction(value)\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)\n   *\n   * Examples:\n   *\n   *     math.fraction(6.283)             // returns Fraction 6283/1000\n   *     math.fraction(1, 3)              // returns Fraction 1/3\n   *     math.fraction('2/3')             // returns Fraction 2/3\n   *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3\n   *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]\n   *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | bigint | Unit | Array | Matrix} [args]\n   *            Arguments specifying the value, or numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function number_number(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    'bigint, bigint': function bigint_bigint(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    bigint: function bigint(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: typed.referToSelf(self => x => {\n      var clone = x.clone();\n      clone.value = self(x.value);\n      return clone;\n    }),\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAW;AACjC,IAAI,iBAAiB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACrE,IAAI,EACF,KAAK,EACL,QAAQ,EACT,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCC,GACD,OAAO,MAAM,YAAY;QACvB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,CAAC,SAAS,MAAM,MAAM,IAAI;gBAC5B,MAAM,IAAI,MAAM,IAAI;YACtB;YACA,OAAO,IAAI,SAAS;QACtB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,SAAS;QACtB;QACA,kBAAkB,SAAS,cAAc,SAAS,EAAE,WAAW;YAC7D,OAAO,IAAI,SAAS,WAAW;QACjC;QACA,kBAAkB,SAAS,cAAc,SAAS,EAAE,WAAW;YAC7D,OAAO,IAAI,SAAS,WAAW;QACjC;QACA,MAAM,SAAS,MAAM,CAAC;YACpB,OAAO,IAAI,SAAS;QACtB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,SAAS,EAAE,QAAQ;QAChC;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,SAAS,EAAE,QAAQ;QAChC;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO,GAAG,0BAA0B;QACtC;QACA,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA;gBAC9B,IAAI,QAAQ,EAAE,KAAK;gBACnB,MAAM,KAAK,GAAG,KAAK,EAAE,KAAK;gBAC1B,OAAO;YACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,SAAS;QACtB;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5418, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo01xDSid';\nvar dependencies = ['typed'];\nexport var createMatAlgo01xDSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype || denseMatrix.getDataType();\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype || sparseMatrix._data === undefined ? sparseMatrix._datatype : sparseMatrix.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // process data types\n    var dt = typeof adt === 'string' && adt !== 'mixed' && adt === bdt ? adt : undefined;\n    // callback function\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n    // vars\n    var i, j;\n\n    // result (DenseMatrix)\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // mark i as updated\n        w[i] = mark;\n      }\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: adt === denseMatrix._datatype && bdt === sparseMatrix._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,uBAAuB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC3E,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,SAAS,WAAW,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO;QACrE,sBAAsB;QACtB,IAAI,QAAQ,YAAY,KAAK;QAC7B,IAAI,QAAQ,YAAY,KAAK;QAC7B,IAAI,MAAM,YAAY,SAAS,IAAI,YAAY,WAAW;QAC1D,uBAAuB;QACvB,IAAI,UAAU,aAAa,OAAO;QAClC,IAAI,SAAS,aAAa,MAAM;QAChC,IAAI,OAAO,aAAa,IAAI;QAC5B,IAAI,QAAQ,aAAa,KAAK;QAC9B,IAAI,MAAM,aAAa,SAAS,IAAI,aAAa,KAAK,KAAK,YAAY,aAAa,SAAS,GAAG,aAAa,WAAW;QAExH,sBAAsB;QACtB,IAAI,MAAM,MAAM,KAAK,MAAM,MAAM,EAAE;YACjC,MAAM,IAAI,kKAAA,CAAA,iBAAc,CAAC,MAAM,MAAM,EAAE,MAAM,MAAM;QACrD;QAEA,uBAAuB;QACvB,IAAI,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE;YAClD,MAAM,IAAI,WAAW,mCAAmC,QAAQ,4BAA4B,QAAQ;QACtG;QAEA,2CAA2C;QAC3C,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM;QAClB;QAEA,iBAAiB;QACjB,IAAI,OAAO,KAAK,CAAC,EAAE;QACnB,IAAI,UAAU,KAAK,CAAC,EAAE;QAEtB,qBAAqB;QACrB,IAAI,KAAK,OAAO,QAAQ,YAAY,QAAQ,WAAW,QAAQ,MAAM,MAAM;QAC3E,oBAAoB;QACpB,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,UAAU;YAAC;YAAI;SAAG,IAAI;QAE/C,OAAO;QACP,IAAI,GAAG;QAEP,uBAAuB;QACvB,IAAI,QAAQ,EAAE;QACd,eAAe;QACf,IAAK,IAAI,GAAG,IAAI,MAAM,IAAK;YACzB,KAAK,CAAC,EAAE,GAAG,EAAE;QACf;QAEA,YAAY;QACZ,IAAI,IAAI,EAAE;QACV,2DAA2D;QAC3D,IAAI,IAAI,EAAE;QAEV,oBAAoB;QACpB,IAAK,IAAI,GAAG,IAAI,SAAS,IAAK;YAC5B,cAAc;YACd,IAAI,OAAO,IAAI;YACf,qBAAqB;YACrB,IAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,IAAI,IAAI,IAAI,IAAK;gBAC5D,MAAM;gBACN,IAAI,MAAM,CAAC,EAAE;gBACb,mBAAmB;gBACnB,CAAC,CAAC,EAAE,GAAG,UAAU,GAAG,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE;gBACzE,oBAAoB;gBACpB,CAAC,CAAC,EAAE,GAAG;YACT;YACA,YAAY;YACZ,IAAK,IAAI,GAAG,IAAI,MAAM,IAAK;gBACzB,4BAA4B;gBAC5B,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM;oBACjB,iCAAiC;oBACjC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;gBACpB,OAAO;oBACL,2BAA2B;oBAC3B,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,EAAE;gBAC3B;YACF;QACF;QAEA,sBAAsB;QACtB,OAAO,YAAY,iBAAiB,CAAC;YACnC,MAAM;YACN,MAAM;gBAAC;gBAAM;aAAQ;YACrB,UAAU,QAAQ,YAAY,SAAS,IAAI,QAAQ,aAAa,SAAS,GAAG,KAAK;QACnF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5536, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAc;AACpC,IAAI,uBAAuB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC3E,IAAI,EACF,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,SAAS,eAAe,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO;QACpD,uBAAuB;QACvB,IAAI,UAAU,EAAE,OAAO;QACvB,IAAI,SAAS,EAAE,MAAM;QACrB,IAAI,OAAO,EAAE,IAAI;QACjB,IAAI,QAAQ,EAAE,KAAK;QACnB,IAAI,MAAM,EAAE,SAAS;QAErB,2CAA2C;QAC3C,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM;QAClB;QAEA,iBAAiB;QACjB,IAAI,OAAO,KAAK,CAAC,EAAE;QACnB,IAAI,UAAU,KAAK,CAAC,EAAE;QAEtB,WAAW;QACX,IAAI;QACJ,4BAA4B;QAC5B,IAAI,KAAK;QAET,qBAAqB;QACrB,IAAI,OAAO,QAAQ,UAAU;YAC3B,WAAW;YACX,KAAK;YACL,iCAAiC;YACjC,IAAI,MAAM,OAAO,CAAC,GAAG;YACrB,WAAW;YACX,KAAK,MAAM,IAAI,CAAC,UAAU;gBAAC;gBAAI;aAAG;QACpC;QAEA,gBAAgB;QAChB,IAAI,QAAQ,EAAE;QAEd,aAAa;QACb,IAAI,IAAI,EAAE;QACV,2DAA2D;QAC3D,IAAI,IAAI,EAAE;QAEV,eAAe;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;YAChC,eAAe;YACf,IAAI,OAAO,IAAI;YACf,cAAc;YACd,IAAK,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,IAAI,IAAI,IAAI,IAAK;gBAC5D,MAAM;gBACN,IAAI,IAAI,MAAM,CAAC,EAAE;gBACjB,mBAAmB;gBACnB,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE;gBACjB,CAAC,CAAC,EAAE,GAAG;YACT;YACA,YAAY;YACZ,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;gBAC7B,+BAA+B;gBAC/B,IAAI,MAAM,GAAG;oBACX,mBAAmB;oBACnB,KAAK,CAAC,EAAE,GAAG,EAAE;gBACf;gBACA,wCAAwC;gBACxC,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM;oBACjB,4BAA4B;oBAC5B,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,EAAE,EAAE;gBACjD,OAAO;oBACL,4BAA4B;oBAC5B,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG;gBAChB;YACF;QACF;QAEA,sBAAsB;QACtB,OAAO,IAAI,YAAY;YACrB,MAAM;YACN,MAAM;gBAAC;gBAAM;aAAQ;YACrB,UAAU;QACZ;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5648, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo08xS0Sid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo08xS0Sid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo08xS0Sid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype || a._data === undefined ? a._datatype : a.getDataType();\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype || b._data === undefined ? b._datatype : b.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var k, k0, k1, i;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values in a\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // mark workspace\n        w[i] = mark;\n        // set value\n        x[i] = avalues[k];\n        // add index\n        cindex.push(i);\n      }\n      // loop values in b\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check value exists in workspace\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      }\n      // initialize first index in j\n      k = cptr[j];\n      // loop index in j\n      while (k < cindex.length) {\n        // row\n        i = cindex[k];\n        // value @ i\n        var v = x[i];\n        // check for zero value\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v);\n          // increment pointer\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === a._datatype && bdt === b._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5810, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo06xS0S0.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nimport { scatter } from '../../../utils/collection.js';\nvar name = 'matAlgo06xS0S0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo06xS0S0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo06xS0S0(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype || a._data === undefined ? a._datatype : a.getDataType();\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype || b._data === undefined ? b._datatype : b.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n    // marks indicating value in a given row has been updated\n    var u = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      scatter(a, j, w, x, u, mark, cindex, cf);\n      // scatter the values of B(:,j) into workspace\n      scatter(b, j, w, x, u, mark, cindex, cf);\n      // check we need to process values (non pattern matrix)\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i];\n            // check for zero value\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j];\n        // loop index in j\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === a._datatype && bdt === b._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5974, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo04xSidSid.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo04xSidSid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo04xSidSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  B(i,j)       ; A(i,j) === 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo04xSidSid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype || a._data === undefined ? a._datatype : a.getDataType();\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype || b._data === undefined ? b._datatype : b.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // update c\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop B(:,j)\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row exists in A\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]);\n            // check for zero\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i);\n          // update workspace\n          wb[i] = mark;\n          // check we need to process values\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // check workspace has value @ i\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i];\n            // increment pointer\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i];\n            // increment pointer\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === a._datatype && bdt === b._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6162, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo05xSfSf.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo05xSfSf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo05xSfSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo05xSfSf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype || a._data === undefined ? a._datatype : a.getDataType();\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype || b._data === undefined ? b._datatype : b.getDataType();\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt && adt !== 'mixed') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values A(:,j)\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // push index\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop values B(:,j)\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row existed in A\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        }\n        // update workspace\n        wb[i] = mark;\n        // check we need to process values\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // marks\n          var wai = wa[i];\n          var wbi = wb[i];\n          // check Aij or Bij are nonzero\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero;\n            // Cij\n            var vc = cf(va, vb);\n            // check for zero\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: adt === a._datatype && bdt === b._datatype ? dt : undefined\n    });\n  };\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6342, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js"],"sourcesContent":["import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index);\n          // check result is a matrix\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n          return m;\n        }\n      // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6555, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js"],"sourcesContent":["import { isArray, isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix', 'getMatrixDataType'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix,\n    getMatrixDataType\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     An Array with Booleans\n   *     A Matrix with the Set values\n   *     A Matrix with Booleans\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._sourceSize = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      var argIsArray = isArray(arg);\n      var argIsMatrix = isMatrix(arg);\n      var argType = typeof arg;\n      var sourceSize = null;\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (argIsArray || argIsMatrix) {\n        // create matrix\n        var m = void 0;\n        if (getMatrixDataType(arg) === 'boolean') {\n          if (argIsArray) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg).valueOf());\n          if (argIsMatrix) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg._data).valueOf());\n          sourceSize = arg.valueOf().length;\n        } else {\n          m = _createImmutableMatrix(arg.valueOf());\n        }\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1 || sourceSize !== null) {\n          this._isScalar = false;\n        }\n      } else if (argType === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (argType === 'bigint') {\n        this._dimensions.push(_createImmutableMatrix([Number(arg)]));\n      } else if (argType === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, bigint, string, or Range');\n      }\n      this._sourceSize.push(sourceSize);\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    index._sourceSize = this._sourceSize;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    if (typeof dim !== 'number') {\n      return null;\n    }\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});\n\n/**\n * Receives an array of booleans and returns an array of Numbers for Index\n * @param {Array} booleanArrayIndex An array of booleans\n * @return {Array} A set of numbers ready for index\n */\nfunction _booleansArrayToNumbersForIndex(booleanArrayIndex) {\n  // gets an array of booleans and returns an array of numbers\n  var indexOfNumbers = [];\n  booleanArrayIndex.forEach((bool, idx) => {\n    if (bool) {\n      indexOfNumbers.push(idx);\n    }\n  });\n  return indexOfNumbers;\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6841, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7177, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/function/index.js"],"sourcesContent":["import { isBigNumber, isMatrix, isArray } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers or booleans\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))                         // returns [2, 3, 4]\n   *    math.subset(b, math.index([false, true, true, true, false]))  // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *    a.subset(math.index(0, [false, true])) // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function number__string__BigNumber__Range__Array__Matrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAQ;AAC9B,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCC,GACD,OAAO,MAAM,MAAM;QACjB,2DAA2D,SAAS,gDAAgD,IAAI;YACtH,IAAI,SAAS,KAAK,GAAG,CAAC,SAAU,GAAG;gBACjC,IAAI,CAAA,GAAA,sJAAA,CAAA,cAAW,AAAD,EAAE,MAAM;oBACpB,OAAO,IAAI,QAAQ,IAAI,8BAA8B;gBACvD,OAAO,IAAI,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,MAAM;oBACxC,OAAO,IAAI,GAAG,CAAC,SAAU,IAAI;wBAC3B,8BAA8B;wBAC9B,OAAO,CAAA,GAAA,sJAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,KAAK,QAAQ,KAAK;oBAC/C;gBACF,OAAO;oBACL,OAAO;gBACT;YACF;YACA,IAAI,MAAM,IAAI;YACd,MAAM,KAAK,CAAC,KAAK;YACjB,OAAO;QACT;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7251, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/matrix/Spa.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nexport var createSpaClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    addScalar,\n    equalScalar,\n    FibonacciHeap\n  } = _ref;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node) {\n      return node.value;\n    }\n    return 0;\n  };\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node) {\n      nodes.push(node);\n    }\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  return Spa;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7391, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtractScalar', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'toBest', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtractScalar,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    toBest,\n    number: _number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = _number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @return {string} type of the value of the unit\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   * @private\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNIT | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(one(other.value)) : this.value;\n      var valOther = other.value === null ? other._normalize(one(this.value)) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(one(other.value)) : this.value;\n      var valOther = other.value === null ? other._normalize(one(this.value)) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\n   * Create a value one with the numeric type of `typeOfValue`.\n   * For example, `one(new BigNumber(3))` returns `BigNumber(1)`\n   * @param {number | Fraction | BigNumber} typeOfValue\n   * @returns {number | Fraction | BigNumber}\n   */\n  function one(typeOfValue) {\n    // TODO: this is a workaround to prevent the following BigNumber conversion error from throwing:\n    //  \"TypeError: Cannot implicitly convert a number with >15 significant digits to BigNumber\"\n    //  see https://github.com/josdejong/mathjs/issues/3450\n    //      https://github.com/josdejong/mathjs/pull/3375\n    var convert = Unit._getNumberConverter(typeOf(typeOfValue));\n    return convert(1);\n  }\n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units.length === 0 || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtractScalar(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units.length === 0 || other.units.length === 0 || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = this.units[0].unit.value;\n      var thisNominalOffset = this.units[0].unit.offset;\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = other.units[0].unit.value;\n      var otherNominalOffset = other.units[0].unit.offset;\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = addScalar(value, convert(subtractScalar(thisUnitOffset, otherUnitOffset)));\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.units.length > 0 ? this.formatUnits() : null,\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var _json$unit;\n    var unit = new Unit(json.value, (_json$unit = json.unit) !== null && _json$unit !== void 0 ? _json$unit : undefined);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    if (this.value !== null) {\n      ret.value = null;\n      return this.to(ret);\n    }\n    return ret;\n  };\n\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\n   * Get a unit, with optional formatting options.\n   * @memberof Unit\n   * @param {string[] | Unit[]} [units]  Array of units strings or valueLess Unit objects in wich choose the best one\n   * @param {Object} [options]  Options for parsing the unit. See parseUnit for details.\n   *\n   * @return {Unit} Returns a new Unit with the given value and unit.\n   */\n  Unit.prototype.toBest = function () {\n    var unitList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (unitList && !Array.isArray(unitList)) {\n      throw new Error('Invalid unit type. Expected string or Unit.');\n    }\n    var startPrefixes = this.units[0].unit.prefixes;\n    if (unitList && unitList.length > 0) {\n      var unitObjects = unitList.map(u => {\n        var unit = null;\n        if (typeof u === 'string') {\n          unit = Unit.parse(u);\n          if (!unit) {\n            throw new Error('Invalid unit type. Expected compatible string or Unit.');\n          }\n        } else if (!isUnit(u)) {\n          throw new Error('Invalid unit type. Expected compatible string or Unit.');\n        }\n        if (unit === null) {\n          unit = u.clone();\n        }\n        try {\n          this.to(unit.formatUnits());\n          return unit;\n        } catch (e) {\n          throw new Error('Invalid unit type. Expected compatible string or Unit.');\n        }\n      });\n      var prefixes = unitObjects.map(el => el.units[0].prefix);\n      this.units[0].unit.prefixes = prefixes.reduce((acc, prefix) => {\n        acc[prefix.name] = prefix;\n        return acc;\n      }, {});\n      this.units[0].prefix = prefixes[0];\n    }\n    var result = formatBest(this, options).simp;\n    this.units[0].unit.prefixes = startPrefixes;\n    result.fixPrefix = true;\n    return result;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n    var {\n      simp,\n      valueStr,\n      unitStr\n    } = formatBest(this, options);\n    var str = valueStr;\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\n  * Helper function to normalize a unit for conversion and formatting\n  * @param {Unit} unit The unit to be normalized\n  * @return {Object} Object with normalized unit and value\n  * @private\n  */\n  function formatBest(unit) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = unit.skipAutomaticSimplification || unit.value === null ? unit.clone() : unit.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    handleVAandVARUnits(simp);\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    applyBestPrefixIfNeeded(simp, options.offset);\n    var value = simp._denormalize(simp.value);\n    var valueStr = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    return {\n      simp,\n      valueStr,\n      unitStr\n    };\n  }\n\n  /**\n   * Helper to handle VA and VAR units\n   * @param {Unit} simp The unit to be normalized\n   */\n  function handleVAandVARUnits(simp) {\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper to apply the best prefix if needed\n   * @param {Unit} simp The unit to be normalized\n   */\n  function applyBestPrefixIfNeeded(simp, offset) {\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix(offset);\n      }\n    }\n  }\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @param {number} [offset]  Optional offset for the best prefix calculation (default 1.2)\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.2;\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - offset;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - offset);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtractScalar(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e27,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e30,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-27,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      ronna: {\n        name: 'ronna',\n        value: 1e27,\n        scientific: true\n      },\n      quetta: {\n        name: 'quetta',\n        value: 1e30,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      },\n      ronto: {\n        name: 'ronto',\n        value: 1e-27,\n        scientific: true\n      },\n      quecto: {\n        name: 'quecto',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e54,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e60,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-54,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-60,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e81,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e90,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-81,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-90,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000000061611519921875,\n      offset: 0\n    },\n    // 1/61440 gallons\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911953125,\n      offset: 0\n    },\n    // 1/1024 gallons\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000295735295625,\n      offset: 0\n    },\n    // 1/128 gallons\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00011829411825,\n      offset: 0\n    },\n    // 1/32 gallons\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882365,\n      offset: 0\n    },\n    // 1/16 gallons\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000473176473,\n      offset: 0\n    },\n    // 1/8 gallons\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000946352946,\n      offset: 0\n    },\n    // 1/4 gallons\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785411784,\n      offset: 0\n    },\n    // 3.785411784 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.117347765304,\n      offset: 0\n    },\n    // 31 gallons\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.158987294928,\n      offset: 0\n    },\n    // 42 gallons\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.238480942392,\n      offset: 0\n    },\n    // 63 gallons\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) * (5 / 9)\n    // K(R) = °R * (5 / 9)\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both kiloerg and kerg are acceptable\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  // note that ALIASES is only used at creation to create more entries in UNITS by copying the aliased units\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fldr: 'fluiddram',\n    fluiddrams: 'fluiddram',\n    floz: 'fluidounce',\n    fluidounces: 'fluidounce',\n    gi: 'gill',\n    gills: 'gill',\n    cp: 'cup',\n    cups: 'cup',\n    pt: 'pint',\n    pints: 'pint',\n    qt: 'quart',\n    quarts: 'quart',\n    gal: 'gallon',\n    gallons: 'gallon',\n    bbl: 'beerbarrel',\n    beerbarrels: 'beerbarrel',\n    obl: 'oilbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    amps: 'ampere',\n    amp: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @memberof Unit\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @memberof Unit\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(String(x.n)).div(String(x.d)).times(String(x.s));\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @memberof Unit\n   * @param {string} c Tested character\n   * @return {boolean} true if the character is a latin letter\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit( {\n   *     foo: {\n   *       prefixes: 'long',\n   *       baseName: 'essence-of-foo'\n   *     },\n   *     bar: '40 foo',\n   *     baz: {\n   *       definition: '1 bar/hour',\n   *       prefixes: 'long'\n   *     }\n   *   },\n   *   {\n   *     override: true\n   *   })\n   * @memberof Unit\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   * @return {Unit} the last created unit\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *\n   * @memberof Unit\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string | Unit | object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string | Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n\n    // delete the memoization cache because we created a new unit\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n\n    // delete the memoization cache because we deleted a unit\n    delete _findUnit.cache;\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"],"names":[],"mappings":"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AY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,MAAM;YACJ,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,KAAK;gBACH,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,QAAQ;gBACN,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,QAAQ;gBACN,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,SAAS;YACP,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,OAAO;YACL,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,iBAAiB;YACf,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11495, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/unit/function/createUnit.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples:\n   *\n   *     math.createUnit('foo')\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\n   *     math.createUnit('mph', '1 mile/hour')\n   *     math.createUnit('km', math.unit(1000, 'm'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, UnitDefinition, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function Object_Object(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function string_Unit__string__Object_Object(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function string_Unit__string__Object(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAO;AAC7B,IAAI,mBAAmB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACvE,IAAI,EACF,KAAK,EACL,IAAI,EACL,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCC,GACD,OAAO,MAAM,MAAM;QACjB,2VAA2V;QAC3V,kBAAkB,SAAS,cAAc,GAAG,EAAE,OAAO;YACnD,OAAO,KAAK,UAAU,CAAC,KAAK;QAC9B;QACA,yCAAyC;QACzC,QAAQ,SAAS,OAAO,GAAG;YACzB,OAAO,KAAK,UAAU,CAAC,KAAK,CAAC;QAC/B;QACA,yCAAyC;QACzC,0CAA0C,SAAS,mCAAmC,IAAI,EAAE,GAAG,EAAE,OAAO;YACtG,IAAI,MAAM,CAAC;YACX,GAAG,CAAC,KAAK,GAAG;YACZ,OAAO,KAAK,UAAU,CAAC,KAAK;QAC9B;QACA,yCAAyC;QACzC,kCAAkC,SAAS,4BAA4B,IAAI,EAAE,GAAG;YAC9E,IAAI,MAAM,CAAC;YACX,GAAG,CAAC,KAAK,GAAG;YACZ,OAAO,KAAK,UAAU,CAAC,KAAK,CAAC;QAC/B;QACA,6CAA6C;QAC7C,QAAQ,SAAS,OAAO,IAAI;YAC1B,IAAI,MAAM,CAAC;YACX,GAAG,CAAC,KAAK,GAAG,CAAC;YACb,OAAO,KAAK,UAAU,CAAC,KAAK,CAAC;QAC/B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11583, "column": 0}, "map": {"version":3,"sources":["file:///Users/uddeshyasingh/WebDev/personal-portfolio/node_modules/mathjs/lib/esm/type/unit/function/unit.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit'];\n\n// This function is named createUnitFunction to prevent a naming conflict with createUnit\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string | Unit': function number__BigNumber__Fraction__Complex_string__Unit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function number__BigNumber__Fraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAO;AAG7B,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACL,IAAI,EACL,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GAED,OAAO,MAAM,MAAM;QACjB,MAAM,SAAS,KAAK,CAAC;YACnB,OAAO,EAAE,KAAK;QAChB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,eAAe,CAAC,IAAI;gBAC3B,OAAO,IAAI,KAAK,MAAM,IAAI,cAAc;YAC1C;YACA,OAAO,KAAK,KAAK,CAAC,GAAG;gBACnB,cAAc;YAChB,IAAI,gCAAgC;QACtC;QACA,0DAA0D,SAAS,kDAAkD,KAAK,EAAE,IAAI;YAC9H,OAAO,IAAI,KAAK,OAAO;QACzB;QACA,iCAAiC,SAAS,4BAA4B,KAAK;YACzE,gBAAgB;YAChB,OAAO,IAAI,KAAK;QAClB;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}}]
}